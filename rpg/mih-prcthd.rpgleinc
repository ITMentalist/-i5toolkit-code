     /**
      * This file is part of i5/OS Programmer's Toolkit.
      *
      * Copyright (C) 2010, 2011  Junlei Li.
      *
      * i5/OS Programmer's Toolkit is free software: you can redistribute it and/or modify
      * it under the terms of the GNU General Public License as published by
      * the Free Software Foundation, either version 3 of the License, or
      * (at your option) any later version.
      *
      * i5/OS Programmer's Toolkit is distributed in the hope that it will be useful,
      * but WITHOUT ANY WARRANTY; without even the implied warranty of
      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      * GNU General Public License for more details.
      *
      * You should have received a copy of the GNU General Public License
      * along with i5/OS Programmer's Toolkit.  If not, see <http://www.gnu.org/licenses/>.
      */

     /**
      * @file mih-prcthd.rpgleinc
      *
      * Process/Thread management instructions.
      */

      /if not defined(i5toolkit_rpg_mih_prcthd)
      /define i5toolkit_rpg_mih_prcthd

     /**
      * @BIF _PCOPTR (PCO Pointer (PCOPTR))
      *
      * A space pointer is returned, which points to the first byte of
      * the PCO (process communication object) for the process which
      * owns the program activation associated with the current
      * invocation. If the current invocation is a client executing in
      * a shared activation group then the pointer returned refers to
      * an object owned by a process other than the current process.
      */
     d pcoptr          pr              *   extproc('_PCOPTR')

     /**
      * @BIF _PCOPTR2 (Return PCO Pointer (PCOPTR2))
      *
      * Return PCO Pointer (PCOPTR2) obtains addressability to a
      * process' PCO (process communication object) and returns it in
      * a space pointer.
      */
     d pcoptr2         pr              *   extproc('_PCOPTR2')

     /**
      * @BIF _MATPRAGP (Materialize Process Activation Groups (MATPRAGP))
      */
     d matpragp        pr                  extproc('_MATPRAGP')
     d     receiver                    *   value

     d matpragp_...
     d   tmpl_t        ds                  qualified
     d                                     based(dummy_ptr)
     d     buf                    65535a
     d     bytes_in                  10i 0 overlay(buf : 1)
     d     bytes_out                 10i 0 overlay(buf : 5)
     d     agp_num                   10i 0 overlay(buf : 9)
     d     agp_marks                  4a   dim(16380)
     d                                     overlay(buf : 13)

     /**
      * Materialization template for MATPRATR when a scalar attribute
      * is materialized.
      */
     d matpratr_tmpl_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0

     /**
      * Materialization template for MATPRATR when a pointer attribute
      * is materialized.
      */
     d matpratr_ptr_tmpl_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d                                8a
     d     ptr                         *

     /* Process priority template */
     d process_priority_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d     priority                   1a

     /* NRL (Name Resolution List), aka. library list of an activate job. */
     d nrl_t           ds                  qualified
     d                                     based(dummy_ptr)
     d     cnt                        5u 0
     d                               12a
     d     ctx_ptr                     *   dim(256)

     /**
      * Materialization template for MATPRATR, option hex 20 --
      * Process status indicators.
      */
     d matpratr_20_t   ds                  qualified
     d                                     based(@dummy)
     d   bytes_in                    10i 0
     d   bytes_out                   10i 0
      *
      * Thread state.
      * Bits 0-2: External existence state
      *   000 = Suspended due to Suspend Process or Suspend Thread
      *   010 = Suspended due to Suspend Process or Suspend Thread,
      *         in instruction wait
      *   100 = Active, in ineligible wait
      *   101 = Active, in current MPL
      *   110 = Active, in instruction wait
      *   111 = Active, in instruction wait, in current MPL
      * Bit 3: Invocation exit active
      * Bit 4: Stopped by a signal
      * Bit 5: Suspended by Suspend Thread
      * Bits 6-7: Reserved (binary 0)
      * Bits 8-10: Internal processing phase
      *   001 = Initiation phase
      *   010 = Problem phase
      *   100 = Termination phase
      * Bits 11-15: Reserved (binary 0)
      *
     d   thd_state                    2a
     d   pending_thread_interrupts...
     d                                2a
      *
      * Process initial internal termination status
      *
      * @remark The process initial internal termination status
      * represents the final internal termination status prior to
      * entering the termination phase. It is updated by the most
      * recent internal termination action. It is possible for both
      * the process initial internal termination status and the
      * process initial external termination status fields to contain
      * valid non-zero values.
      *
     d   piit                         3a
      *
      * Hex 80 = Return from first invocation in problem phase
      * Hex 40 = Return from first invocation in initiation phase and
      *          no problem phase program specified.
      * Hex 21 = Terminate Thread instruction issued against the
      *          initial thread by a thread in the process.
      * Hex 20 = Terminate Process instruction issued by a thread
      *          within the process.
      * Hex 18 = An unhandled signal with a default signal handling
      *          action of terminate the process or terminate the
      *          request was delivered to the process.
      * Hex 10 = Exception was not handled by the initial thread in
      *          the process.
      * Hex 00 = Process terminated externally.
      *
     d     iit_reason                 1a   overlay(piit:1)
      *
      * 1. If the termination is caused by a Return External
      * instruction from the first invocation in the initial thread,
      * then this code is binary 0's.
      * 2. If the termination is caused by an unhandled signal, then
      * this code is the signal number of the unhandled signal.
      * 3. The code is assigned by the original exception code that
      * caused process termination to start.
      *
     d     iit_code                   2a   overlay(piit:2)
      *
      * Process initial external termination status
      *
      * @remark The process initial external termination status
      * represents the final external termination status prior to
      * entering the termination phase. It is updated by the most
      * recent external termination action. It is possible for both
      * the process initial internal termination status and the
      * process initial external termination status fields to contain
      * valid non-zero values.
      *
     d   piet                         3a
      * Initial external termination reason:
      *   Hex 80 = Terminate Process instruction issued explicitly to
      *            the process by a thread in another process.
      *   Hex 40 = Terminate Thread instruction issued explicitly to
      *            the initial thread of the process by a thread in
      *            another process.
      *   Hex 00 = Process terminated internally.
     d     iet_reason                 1a   overlay(piet:1)
      * Initial external termination code
     d     iet_code                   2a   overlay(piet:2)
      *
      * Process final termination status
      *
      * @remark The process final termination status is presented as
      * event-related data in the terminate process event. Usually the
      * event is the only source of the process final termination
      * status since the process will cease to exist before its
      * attributes can be materialized.
      *
      * @remark The process final termination status describes how the
      * final phase (aka the termination phase) of the process
      * terminated. It is updated by the most recent termination
      * action for the final process phase.
      *
     d   pfit                         3a

     /**
      * @BIF _MATPRATR1 (Materialize Process Attributes (MATPRATR))
      */
     d matpratr1       pr                  extproc('_MATPRATR1')
     d     receiver                        likeds(matpratr_tmpl_t)
     d     option                     1a

     /**
      * @BIF _MATPRATR2 (Materialize Process Attributes (MATPRATR))
      */
     d matpratr2       pr                  extproc('_MATPRATR2')
     d     receiver                        likeds(matpratr_tmpl_t)
     d     pcs                         *
     d     option                     1a

     /**
      * @BIF _RETTHCNT (Retrive Thread Count (RETTHCNT))
      */
     d retthcnt        pr            10u 0 extproc('_RETTHCNT')

     /**
      * @BIF _RETTHID (Retrieve Thread Identifier (RETTHID))
      */
     d retthid         pr             8a   extproc('_RETTHID')

     /**
      * @BIF _TSTINLTH (Test Initial Thread (TSTINLTH))
      */
     d tstinlth        pr            10i 0 extproc('_TSTINLTH')

     /**
      * @BIF _TESTINTR (Test Pending Interrupts (TESTINTR))
      */
     d testintr        pr            10u 0 extproc('_TESTINTR')

     /**
      * @BIF _WAITTIME (Wait On Time (WAITTIME))
      */
     d waittime        pr                  extproc('_WAITTIME')
     d     wait_tmpl                 16a

     /* wait template for WAITTIME */
     d wait_tmpl_t     ds            16    qualified
     d     interval                  20u 0
     d     option                     2a
     d                                6a

     /* 8 microseconds in system closk format */
     d sysclock_eight_microsec...
     d                 c                   x'0000000000008000'

     /* 1 millisecond in system closk format */
     d sysclock_one_millisec...
     d                 c                   x'00000000003E8000'

     /* 1 second in format of system clock */
     d sysclock_one_second...
     d                 c                   x'00000000F4240000'

     /* 1 hour in format of system clock */
     d sysclock_one_hour...
     d                 c                   x'00000D693A400000'

     /* 1 week in format of system clock */
     d sysclock_one_week...
     d                 c                   x'0008CD0E3A000000'

      /endif

