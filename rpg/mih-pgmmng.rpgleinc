     /**
      * This file is part of i5/OS Programmer's Toolkit.
      *
      * Copyright (C) 2010, 2011  Junlei Li.
      *
      * i5/OS Programmer's Toolkit is free software: you can redistribute it and/or modify
      * it under the terms of the GNU General Public License as published by
      * the Free Software Foundation, either version 3 of the License, or
      * (at your option) any later version.
      *
      * i5/OS Programmer's Toolkit is distributed in the hope that it will be useful,
      * but WITHOUT ANY WARRANTY; without even the implied warranty of
      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      * GNU General Public License for more details.
      *
      * You should have received a copy of the GNU General Public License
      * along with i5/OS Programmer's Toolkit.  If not, see <http://www.gnu.org/licenses/>.
      */

     /**
      * @file mih-pgmmng.rpgleinc
      *
      * Program management instructions.
      */

      /if not defined(i5toolkit_rpg_mih_pgmmng)
      /define i5toolkit_rpg_mih_pgmmng

     /* program management */

     /* Materialization template for MATPG */
     d matpg_tmpl_t    ds                  qualified
     d                                     based(dummy_ptr)
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d     pgm_id                    32a
     d       pgm_type                 2a   overlay(pgm_id)
     d       pgm_name                30a   overlay(pgm_id:3)
      * Program creation options
     d     crt_opt                    4a
     d                                4a
     d     spc_size                  10i 0
     d     spc_init_val...
     d                                1a
      * Performance class
     d     perf_cls                   4a
     d                                7a
      * Context
     d     ctx                         *
      * Access group
     d     ag                          *
      * Program attributes
     d     pgm_attr                   2a
      * Code generation options
     d     gen_opt                    1a
      * Observation attributes
     d     obsv_attr                  1a
      * Size of static storage
     d     ss_size                   10u 0
      * Size of automatic storage
     d     as_size                   10u 0
      * Number of instructions (1)
     d     num_inst1                  5u 0
      *
      * Number of ODV entries (1)
      *
      * For version number = hex 0000, this field indicates the number
      * of instructions. For version number = hex 0001, this field is
      * reserved (binary 0).
      *
     d     num_odv1                   5i 0
     d     inst_stream_offset...
     d                               10i 0
     d     odv_offset                10i 0
     d     oes_offset                10i 0
      * Length of breakpoint offset mapping table entry
     d     bom_ent_len...
     d                               10i 0
      * Length of breakpoint offset mapping table component 	
     d     bom_len                   10i 0
     d     bom_offset                10i 0
      * length of symbol table entry
     d     symtbl_ent_len...
     d                               10i 0
     d     symtbl_len                10i 0
     d     symtbl_offset...
     d                               10i 0
      *
      * Offset (in bytes) from beginning of template to the
      * object mapping table (OMT) component
      *
     d     omt_offset                10i 0
     d     num_inst2                 10i 0
     d     num_odv2                  10i 0
      *
      * Template extension
      *
      * @remark This extension exists only when the template extension
      *         existence bit (bit 10 of @var pgm_attr) is 1.
      *
     d     ext_pgm_attr...
     d                                4a
      *
      * Language version, release, and modification level
      *
      * Bits 0-3. Reserved
      * Bits 4-7. Version
      * Bits 8-11. Release
      * Bits 12-15. Mod level
      *
     d     lang_vrm                   2a
      *
      * BOM table flags
      *
      * Bit 0. Use new BOM table format
      *  0 = old BOM format
      *  1 = new BOM format
      * Bit 1-7. User data5A
      *
     d     bom_flags                  1a
     d     user_data5B...
     d                                7a
      *
      * Version, release, and modification level this program
      * is being created for.
      *
     d     pgm_vrm                    2a
      *
      * Data required for machine retranslation
      *
      * Bit 0. All data required for machine retranslation is present
      *   0 = No
      *   1 = Yes
      * Bits 1-7. Reserved (binary 0)
      *
     d     data_required_for_machine_retranslation...
     d                                1a
      * Reserved (binary 0)
     d                               47a
      *
      * Program data
      *    Instruction stream component
      *    ODV component
      *    OES component
      * BOM table
      * Symbol table
      * Object mapping table
      *

     /**
      * Layout of the symbol table component.
      */
     d symbol_table_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
      * Number of hash buckets
     d     num_buckets...
     d                               10i 0
      *
      * Hash bucket
      *
      * Each hash bucket contains an offset to the first symbol table
      * base segment entry of the chain. This offset is from the
      * beginning of the symbol table. The end of the chain has a -1
      * value.
      *
      * @remark Maximum of 1000 hash buckets.
      *
     d     buckets                   10i 0 dim(1000)

     /**
      * Symbol table base segment
      */
     d symtbl_base_t...
     d                 ds                  qualified
      * -1 if it's the end of the chain
     d     next_entry_offset...
     d                               10i 0
      * ODT index or MI instruction number
     d     num                        5i 0
      *
      * Bit 0. Instruction or ODT number
      *  0 = MI instruction number
      *  1 = ODT number
      * Bit 1. Symbol origin
      *  0 = Compiler generated
      *  1 = Source program
      * Bit 2. Array specification
      *  0 = Row major
      *  1 = Column major
      * Bit 3. Format segment present
      *  0 = No
      *  1 = Yes
      * Bit 4. Array segment present
      *  0 = No
      *  1 = Yes
      * Bit 5. Extension segment present
      *  0 = No
      *  1 = Yes
      * Bits 6-7. Reserved (binary 0)
      *
     d     flag                       1a
      * Length of symbol
     d     len                        1a
      * symbol
     d     name                      16a

     /**
      * Symbol table format segment
      */ 
     d symtbl_format_t...
     d                 ds            20    qualified
      * Format program name
     d     fmt_pgm_name...
     d                               10a
      * Format code
     d     fmt_code                   4a
      * Locator variable ODT#
     d     loc_var_odt...
     d                                5u 0
      * Descriptor variable ODT#
     d     desc_var_odt...
     d                                5u 0
      * Reserved (binary 0)
     d                                2a

     /**
      * Symbol table array segment
      *  - Number of array dimensions           Bin(2)
      *  - Indexes (1 per array dimension)      [*] Char(8)
      *    - Lower index                        Bin(4)
      *    - upper index                        Bin(4)
      */

     /**
      * Symbol table extended segment
      */
     d symtbl_ex_t     ds            26    qualified
      * Extended segment length
     d     seg_len                    5u 0
      * Structure level
     d     ds_level                   2a
      *
      * Data representation
      *  hex 00 = See ODT
      *  hex 01 = Binary
      *  hex 02 = Zoned
      *  hex 03 = Bit string
      *
     d     dta_rep                    1a
      * Number of total digits
     d     total_digits...
     d                                5i 0
      * Number of fractional digits
     d     fractional_digits...
     d                                5i 0
      *
      * Sign of number
      *  hex 00 = Leading embedded
      *  hex 01 = Leading separated
      *  hex 02 = Trailing separate
      *
     d     sign                       1a
      * Offset to base segment entry of parent. The end of the chain has a -1 value.
     d     offset_to_base_segment_entry_of_parent...
     d                               10i 0
      * Offset to base segment entry of synonym. The end of the chain has a -1 value.
     d     offset_to_base_segment_entry_of_synonym...
     d                               10i 0
      *
      * Bit 0. Object is a HLL pointer
      * Bit 1. Array segment is in multi-dimensioned array format
      * Bits 2-7. Reserved (binary 0)
      *
     d     flag                       1a
      * Reserved (binary 0)
     d                                7a

     /**
      * Old format BOM table entry
      */
     d bom_entry0_t    ds            12    qualified
      *
      * Bit 0. Format flag
      *   0 = HLL statement number is in character format
      *   1 = HLL statement number is in numeric format
      *
     d     mi_inst                    5u 0
     d     hll_stmt_name...
     d                               10a
     d     hll_stmt_num...
     d                                5i 0 overlay(
     d                                       hll_stmt_name:1)

     /**
      * New format BOM table entry
      */
     d bom_entry1_t    ds            13    qualified
     d     mi_inst                    5u 0
      *
      * Bit 0. Format flag
      *   0 = HLL statement number is in character format
      *   1 = HLL statement number is in numeric format
      *
     d     fmt_flag                   1a
     d     hll_stmt_name...
     d                               10a
     d     hll_stmt_num...
     d                                5i 0 overlay(
     d                                       hll_stmt_name:1)

     /**
      * ODV entry
      */
     d odv_entry_t     ds             4    qualified
     d     hi                         2a
     d     lo                         2a
     d     oes_offset                 5u 0 overlay(lo)
      * scalar length
     d     scalar_len                 2a   overlay(lo)
      * MI instruction number
     d     inst_num                   5u 0 overlay(lo)

     /**
      * OMT entry
      */
     d omt_entry_t     ds             6    qualified
      *
      * addressability type
      *  hex 00 = Base addressability is from the start of the static
      *           storage. e.g. def(static-var)
      *  hex 01 = Base addressability is from the start of the
      *           automatic storage area. e.g. def(auto-var)
      *  hex 02 = Base addressability is from the start of the storage
      *           area addressed by a space pointer. e.g. bas(spp-ptr)
      *  hex 03 = Base addressability is from the start of the storage
      *           area of a parameter.  e.g. bas(parm-var)
      *  hex 04 = Base addressability is from the start of the storage
      *           area addressed by the space pointer found in the
      *           process communication object attribute of the
      *           process associated with the thread executing the
      *           program. aka. baspco
      *  hex FF = Base addressability not provided. The object is
      *           contained in machine storage areas to which
      *           addressability cannot be given, or a parameter has
      *           addressability to an object that is in the storage
      *           of another program.
      *
     d     addr_type                  1a
      *
      * Offset from base. For types hex 00, hex 01, hex 02, hex 03,
      * and hex 04, this is a 3-byte logical binary value representing
      * the offset to the object from the base addressability. For
      * type hex FF, the value is binary 0.
      *
     d     offset                     3a
      *
      * Base addressability. For types hex 02 and hex 03, this is a
      * 2-byte binary field containing the number of the OMT entry for
      * the space pointer or a parameter that provides base
      * addressability for this object. For types hex 00, hex 01, hex
      * 04 and hex FF, the value is binary 0.
      *
     d     basee                      5u 0

     /**
      * @BIF _MATPG (Materialize Program (MATPG))
      *
      * @attention This instruction does not process teraspace addresses ...
      */
     d matpg           pr                  extproc('_MATPG')
     d     receiver                        likeds(matpg_tmpl_t)
     d     pgm                         *

     /**
      * @BIF _MATPGMNM (Materialize Program Name (MATPGMNM))
      */
     d matpgmnm        pr                  extproc('_MATPGMNM')
     d     rcv_tmpl                        likeds(matpgmnm_tmpl_t)

     d matpgmnm_tmpl_t...
     d                 ds            80    qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d     format                    10i 0
     d                                4a
     d     ctx_type                   2a
     d     ctx_name                  30a
     d     bpgm_type                  2a
     d     bpgm_name                 30a
     d matpgmnm_tmpl_len...
     d                 c                   80

      /endif
