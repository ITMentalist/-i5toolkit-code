     /**
      * This file is part of i5/OS Programmer's Toolkit.
      *
      * Copyright (C) 2010  Junlei Li.
      *
      * i5/OS Programmer's Toolkit is free software: you can redistribute it and/or modify
      * it under the terms of the GNU General Public License as published by
      * the Free Software Foundation, either version 3 of the License, or
      * (at your option) any later version.
      *
      * i5/OS Programmer's Toolkit is distributed in the hope that it will be useful,
      * but WITHOUT ANY WARRANTY; without even the implied warranty of
      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      * GNU General Public License for more details.
      *
      * You should have received a copy of the GNU General Public License
      * along with i5/OS Programmer's Toolkit.  If not, see <http://www.gnu.org/licenses/>.
      */

     /**
      * @file mih52.rpgleinc
      *
      * Header of system builtins for ILE RPG provided by the
      * open-source project i5/OS Programmer's Toolkit.
      * For details please refer to the project's web site,
      * http://i5toolkit.sourceforge.net/
      *
      * @attention This header is for i5/OS Release 5 Version 2.
      */

      /if not defined(i5toolkit_rpg_mih52)
      /define i5toolkit_rpg_mih52

     /* computation instructions */

     /* CPRDATA template */
     d cprdata_tmpl_t  ds                  qualified
     d                                     based(dummy_ptr)
     d     source_len                10i 0
     d     target_len                10i 0
     d     returned_target_len...
     d                               10i 0
     d     algorithm                  5i 0
     d                               18a
     d     source                      *
     d     target                      *

     /* length of cprdata_tmpl_t */
     d CPRDATA_TMPL_LENGTH...
     d                 c                   64

     /* CPRDATA, compress data */
     d cprdata         pr                  extproc('_CPRDATA')
     d    tmpl                         *   value

     /* DCPDATA template */
     d dcpdata_tmpl_t  ds                  qualified
     d                                     based(dummy_ptr)
     d                                4a
     d     result_len                10i 0
     d     returned_result_len...
     d                               10i 0
     d                               20a
     d     source                      *
     d     target                      *

     /* length of dcpdata_tmpl_t */
     d DCPDATA_TMPL_LENGTH...
     d                 c                   64

     /* DCPDATA, decompress data */
     d dcpdata         pr                  extproc('_DCPDATA')
     d    tmpl                         *   value

     /* TSTBTS, test bit in string                         */
     /* @return 1 if bit is set, otherwise 0               */
     d tstbts          pr            10i 0 extproc('_TSTBTS')
     d     str                         *   value
     d     offset                    10u 0 value

     /* CLRBTS, clear bit in string */
     d clrbts          pr                  extproc('_CLRBTS')
     d     str                         *   value
     d     offset                    10u 0 value

     /* SETBTS, set bit in string */
     d setbts          pr                  extproc('_SETBTS')
     d     str                         *   value
     d     offset                    10u 0 value

     /* CVTEFN, convert external form to numeric value */
     d cvtefn          pr                  extproc('_CVTEFN')
     d     receiver                    *   value
     d     rcv_attr                   7a
     d     source                      *   value
     d     src_length                10u 0
     d     mask                       3a

     /* data structure used as CPYECLAP's operand 3 */
     d cpyeclap_pad_t  ds                  qualified
     d     single_byte_pad_value...
     d                                1a
     d     double_byte_pad_value...
     d                                2a

     /* CPYECLAP, copy extended characters left-adjusted with pad */
     d cpyeclap        pr                  extproc('_CPYECLAP')
     d     receiver                    *
     d     source                      *
     d     pad                             likeds(cpyeclap_pad_t)

     /* CPYNV, copy numeric value */
     d lbcpynv         pr                  extproc('_LBCPYNV')
     d     receiver                    *   value
     d     receiver_attr...
     d                                7a
     d     source                      *   value
     d     source_attr...
     d                                7a

     /* CPYNV, copy numeric value and round the result half adjusted. */
     d lbcpynvr        pr                  extproc('_LBCPYNVR')
     d     receiver                    *   value
     d     receiver_attr...
     d                                7a
     d     source                      *   value
     d     source_attr...
     d                                7a

     /* end -- computation instructions */

     /* bound program calculation builtins */

     /* ACOS */
     d acos            pr             8f   extproc('_ACOS')
     d     x                          8f   value

     /* ANDCSTR: And Complemented String */
     d andcstr         pr                  extproc('_ANDCSTR')
     d     receiver                   1a   options(*varsize)
     d     str1                       1a   options(*varsize)
     d     str2                       1a   options(*varsize)
     d     length                    10u 0 value

     /* ANDSTR: and string */
     d andstr          pr                  extproc('_ANDSTR')
     d     receiver                   1a   options(*varsize)
     d     str1                       1a   options(*varsize)
     d     str2                       1a   options(*varsize)
     d     length                    10u 0 value

     /* ASIN */
     d asin            pr             8f   extproc('_ASIN')
     d     x                          8f   value

     /* ATAN */
     d atan            pr             8f   extproc('_ATAN')
     d     x                          8f   value

     /* ATANH, arc tangent hyperbolic */
     d atanh           pr             8f   extproc('_ATANH')
     d     x                          8f   value

     /* STRLENNULL, compute length of null-terminated string */
     d strlennull      pr            10u 0 extproc('__strlen')
     d     str                        1a   options(*varsize)

     /* STRCMPNULL, compare null-terminated strings */
     d strcmpnull      pr            10i 0 extproc('__strcmp')
     d     str1                       1a   options(*varsize)
     d     str2                       1a   options(*varsize)

     /* STRNCMPNULL, compare null-terminated strings constrained */
     d strncmpnull     pr            10i 0 extproc('_STRNCMPNULL')
     d     str1                       1a   options(*varsize)
     d     str2                       1a   options(*varsize)
     d     length                    10u 0 value

     /* CMPTOPAD, compare to pad */
     d cmptopad        pr            10i 0 extproc('_CMPTOPAD')
     d     str                        1a   options(*varsize)
     d     pad                        1a   value
     d     length                    10u 0 value

     /* COMSTR, complement string */
     d comstr          pr                  extproc('_COMSTR')
     d     receiver                   1a   options(*varsize)
     d     source                     1a   options(*varsize)
     d     length                    10u 0 value

     /* COS, cosine */
     d cos             pr             8f   extproc('_COS')
     d     x                          8f   value

     /* COSH, cosine hyperbolic */
     d cosh            pr             8f   extproc('_COSH')
     d     x                          8f   value

     /* COT, cotangent */
     d cot             pr             8f   extproc('_COT')
     d     x                          8f   value

     /* CPYBYTES, copy bytes */
     d cpybytes        pr                  extproc('_CPYBYTES')
     d     target                      *   value
     d     source                      *   value
     d     length                    10u 0 value

     /* CPYBO, copy bytes overlapping */
     d cpybo           pr                  extproc('_CPYBO')
     d     target                      *   value
     d     source                      *   value
     d     length                    10u 0 value

     /* STRCPYNULL, copy null-terminated string */
     d strcpynull      pr              *   extproc('__strcpy')
     d     target                     1a   options(*varsize)
     d     source                     1a   options(*varsize)

     /* STRNCPYNULL, copy null-terminated string constrained */
     d strncpynull     pr              *   extproc('_STRNCPYNULL')
     d     target                     1a   options(*varsize)
     d     source                     1a   options(*varsize)
     d     length                    10u 0 value

     /* STRNCPYNULLPAD, copy null-terminated string constrained, null padded */
     d strncpynullpad  pr              *   extproc('_STRNCPYNULLPAD')
     d     target                     1a   options(*varsize)
     d     source                     1a   options(*varsize)
     d     length                    10u 0 value

     /* EEXP, exponential function of e */
     d exp             pr             8f   extproc('_EEXP')
     d     x                          8f   value

     /* FINDBYTE, find byte */
     d findbyte        pr              *   extproc('_FINDBYTE')
     d     source                      *   value
     d     to_search                  1a   value

     /* MEMCHR, find character constrained */
     d memchr          pr              *   extproc('_MEMCHR')
     d     source                      *   value
     d     to_search                  1a   value
     d     length                    10u 0 value

     /* STRCHRNULL, find character in null-terminated string */
     d strchrnull      pr              *   extproc('_STRCHRNULL')
     d     source                      *   value
     d     to_search                  1a   value

     /* LN, logarithm base e (natural logarithm) */
     d log             pr             8f   extproc('_LN')
     d     x                          8f   value

     /* MEMCMP, memory compare  */
     d memcmp          pr            10i 0 extproc('__memcmp')
     d     addr1                       *   value
     d     addr2                       *   value
     d     length                    10u 0 value

     /* MEMCPY, memory copy  */
     d memcpy          pr              *   extproc('__memcpy')
     d     target                      *   value
     d     source                      *   value
     d     length                    10u 0 value

     /* MEMMOVE, memory move  */
     d memmove         pr              *   extproc('_MEMMOVE')
     d     target                      *   value
     d     source                      *   value
     d     length                    10u 0 value

     /* ORSTR: or string */
     d orstr           pr                  extproc('_ORSTR')
     d     receiver                   1a   options(*varsize)
     d     str1                       1a   options(*varsize)
     d     str2                       1a   options(*varsize)
     d     length                    10u 0 value

     /* POWER, x to the y power */
     d power           pr             8f   extproc('_POWER')
     d     x                          8f   value
     d     x                          8f   value

     /* PROPB, propogate byte */
     d propb           pr              *   extproc('__memset')
     d     target                      *   value
     d     src_byte                   1a   value
     d     length                    10u 0 value

     /* RETCA, retrieve computational attributes */
     d retca           pr            10u 0 extproc('_RETCA')
     d     selector                   1a   value

     /* SETCA, set computational attributes */
     d setca           pr                  extproc('_SETCA')
     d     new_ca                    10u 0 value
     d     selector                  10u 0 value

     /* SCANX, scan extended.  @todo usage */
     d scanx           pr            10i 0 extproc('_SCANX')
     d     base_...
     d       locator                   *
     d     controls                    *   value
     d     options                    4a   value

     /* SIN, sine */
     d sin             pr             8f   extproc('_SIN')
     d     x                          8f   value

     /* SINH, sine hyperbolic */
     d sinh            pr             8f   extproc('_SINH')
     d     x                          8f   value

     /* TAN, tangent */
     d tan             pr             8f   extproc('_TAN')
     d     x                          8f   value

     /* TANH, tangent hyperbolic */
     d tanh            pr             8f   extproc('_TANH')
     d     x                          8f   value

     /* TESTRPL, test and replace bytes */
     d testrpl         pr                  extproc('_TESTRPL')
     d     source                      *   value
     d     src_len                   10u 0 value
     d     cmp_str                     *   value
     d     rpl_str                     *   value
     d     other_len                 10u 0 value

     /* TESTSUBSET, test subset */
     d testsubset      pr            10u 0 extproc('_TESTSUBSET')
     d     src1                        *   value
     d     src2                        *   value
     d     length                    10u 0 value

     /* XLATEB, translate bytes */
     d xlateb          pr                  extproc('_XLATEB')
     d     source                      *   value
     d     table                       *   value
     d     length                    10u 0 value

     /* XLATEB1, translate bytes one byte at a time */
     d xlateb1         pr                  extproc('_XLATEB1')
     d     receiver                    *   value
     d     source                      *   value
     d     table                       *   value
     d     length                    10u 0 value

     /* XORSTR, XOR string */
     d xorstr          pr                  extproc('_XORSTR')
     d     receiver                   1a   options(*varsize)
     d     str1                       1a   options(*varsize)
     d     str2                       1a   options(*varsize)
     d     length                    10u 0 value

     /* end -- bound program calculation builtins */

     /* date/time/timestamp */

     /* SAA DDAT without era table and calenday table */
     d saa_ddat1_t     ds            36    qualified
     d                                     based(dummy_ptr)
     d                                5u 0
     d     fmt_code                   5u 0
     d     date_sep                   1a
     d     time_sep                   1a
      * timezone definitions
     d     hour_time_zone...
     d                                5u 0
     d     minute_time_zone...
     d                                5u 0
      * duration definitions
     d     month_def                  5u 0
     d     year_def                   5u 0
      * century definitions
     d     current_century...
     d                               10u 0
     d     century_division...
     d                               10u 0
     d     calendar_table_offset...
     d                               10u 0
     d                                6a
     d saa_ddat1_len   c                   36

     /* SAA DDAT with era table and calenday table */
     d saa_ddat2_t     ds           116    qualified
     d                                     based(dummy_ptr)
     d                                5u 0
     d     fmt_code                   5u 0
     d     date_sep                   1a
     d     time_sep                   1a
      * timezone definitions
     d     hour_time_zone...
     d                                5u 0
     d     minute_time_zone...
     d                                5u 0
      * duration definitions
     d     month_def                  5u 0
     d     year_def                   5u 0
      * century definitions
     d     current_century...
     d                               10u 0
     d     century_division...
     d                               10u 0
     d     calendar_table_offset...
     d                               10u 0
     d                                6a
      * era table. SAA DDAT has only one era table
     d     era_table_elements...
     d                                5u 0
     d     era_origin_date...
     d                               10u 0
     d     era_name...
     d                               32a
     d                               12a
      * calendar table
     d     calendar_table_elements...
     d                                5u 0
     d     gregorian_effective_date...
     d                               10u 0
     d     gregorain_calendar_type...
     d                                5u 0
     d                               10a
     d     null_effective_date...
     d                               10u 0
     d     null_calendar_type...
     d                                5u 0
     d                               10a
     d saa_ddat2_len   c                   116
     d saa_ddat2_caltbl_offset...
     d                 c                   82
     d saa_origine_date...
     d                 c                   1721426
     d saa_era_name    c                   'AD, anno Domini'
     d gregorian_end_date...
     d                 c                   5373485
     d null_calendar_type...
     d                 c                   x'0000'
     d gregorian_calendar_type...
     d                 c                   x'0001'
     d julian_calendar_type...
     d                 c                   x'0002'

     /*
      * compute-duration instruction template for
      * instruction CDD, CTD, and CTSD.
      */
     d dt_compute_duration_tmpl_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     tmpl_size                 10u 0
     d     op1_ddat_index...
     d                                5u 0
     d     op2_ddat_index...
     d                                5u 0
     d     op3_ddat_index...
     d                                5u 0
     d                                2a
     d     op2_length                 5u 0
     d     op3_length                 5u 0
     d                               26a
      * DDAT list
     d     ddat_list_len...
     d                               10u 0
     d     ddats                      5u 0
     d                               10a
      * DDAT offsets of type ubin(4)
     d     ddat_offsets...
     d                               10u 0 dim(256)
      * DDATs
     d datetime_ddat_list_offset...
     d                 c                   42

     /* CDD, compute date duration */
     d cdd             pr                  extproc('_CDD')
      * address of a pkd(8,0) scalar
     d     date_duration...
     d                                 *   value
      * address of end-date
     d     date1                       *   value
      * address of begin-date
     d     date2                       *   value
      * instruction template
     d     inst_tmpl                       likeds(
     d                                       dt_compute_duration_tmpl_t)

     /* CTD, compute time duration */
     d ctd             pr                  extproc('_CTD')
      * address of a pkd(8,0) scalar
     d     time_duration...
     d                                 *   value
      * address of end-time
     d     time1                       *   value
      * address of begin-time
     d     time2                       *   value
      * instruction template
     d     inst_tmpl                       likeds(
     d                                       dt_compute_duration_tmpl_t)

     /* materialization template of UTC TOD clock for MATTODAT */
     d mattodat_utc_clock_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d                                8a
     d     time_of_day...
     d                                8a
     d     timezone_offset...
     d                               10i 0
     d                                4a
     d mattodat_utc_clock_len...
     d                 c                   32

     /* end -- date/time/timestamp */

     /* pointer resolution */

     /* CMPPTRT, compare pointer type */
     d cmpptrt         pr            10i 0 extproc('_CMPPTRT')
     d     ptr_type                   1a   value
     d     ptr                         *   value

     /* CPYBWP, copy bytes with pointers */
     d cpybwp          pr                  extproc('_CPYBWP')
     d     receiver                    *   value
     d     source                      *   value
     d     length                    10u 0 value

     /* MATPTR template header */
     d matptr_tmpl_t   ds                  qualified
     d                                     based(dummy_ptr)
     d     bytes_in                  10i 0                                      bytes provided
     d     bytes_out                 10i 0                                      bytes available
     d     ptr_type                   1a                                        returned pointer type

     /* length of MATPTR template header */
     d matptr_header_...
     d   length        c                   9

     /* length of SYSPTR information */
     d matptr_sysptr_...
     d   info_length   c                   80

     /* SYSPTR info structure */
     d matptr_sysptr_...
     d   info_t        ds                  qualified
     d                                     based(dummy_ptr)
     d     bytes_in                  10i 0                                      bytes provided
     d     bytes_out                 10i 0                                      bytes available
     d     ptr_type                   1a                                        returned pointer type
     d     ctx_type                   2a                                        context type
     d     ctx_name                  30a                                        context name
     d     obj_type                   2a                                        object type
     d     obj_name                  30a                                        object name
     d     ptr_auth                   2a                                        PTR authorization
     d     ptr_target                 2a                                        PTR target info

     /* length of SPCPTR information */
     d matptr_spcptr_...
     d   info_length   c                   96

     /* SPCPTR info structure */
     d matptr_spcptr_...
     d   info_t        ds                  qualified
     d                                     based(dummy_ptr)
     d     bytes_in                  10i 0                                      bytes provided
     d     bytes_out                 10i 0                                      bytes available
     d     ptr_type                   1a                                        returned pointer type
     d     ctx_type                   2a                                        context type
     d     ctx_name                  30a                                        context name
     d     obj_type                   2a                                        object type
     d     obj_name                  30a                                        object name
     d     offset                    10i 0                                      offset into space
     d     ptr_target                 2a                                        PTR target info
     d                                1a                                        reserved
     d     ext_offset                 8a                                        teraspace offest

     /* length of PROCPTR information */
     d matptr_procptr_info_length...
     d                 c                   80

     /* DTAPTR attributes */
     d matptr_dtaptr_info_length...
     d                 c                   84
     d matptr_dtaptr_info_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     bytes_in                  10i 0                                      bytes provided
     d     bytes_out                 10i 0                                      bytes available
     d     ptr_type                   1a                                        returned pointer type
     d     dta_type                   1a                                        scalar type
     d     dta_length                 5u 0                                      scalar length
     d                                4a                                        reserved
     d     ctx_type                   2a
     d     ctx_name                  30a
     d     obj_type                   2a
     d     obj_name                  30a
     d     offset                    10i 0

     /* PROCPTR info structure */
     d matptr_procptr_info_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     bytes_in                  10i 0                                      bytes provided
     d     bytes_out                 10i 0                                      bytes available
     d     ptr_type                   1a                                        returned pointer type
     d     ptr_status                 1a                                        pointer status
     d                                6a                                        reserved
     d     mod_num                   10u 0                                      module number
     d     proc_num                  10u 0                                      procedure number
     d     act_mark                  10u 0                                      activation mark
     d     ag_mark                   10u 0                                      activation group mark
     d     pgm                         *                                        containing program
     d     process                     *                                        containing process
     d     act_mark2                  8a                                        8-bytes activation mark
     d     ag_mark2                   8a                                        8-bytes activation group mark

     /* label pointer attributes */
     d matptr_lblptr_info_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     bytes_in                  10i 0                                      bytes provided
     d     bytes_out                 10i 0                                      bytes available
     d     ptr_type                   1a                                        returned pointer type
     d     ptr_status                 1a                                        pointer status
     d                                6a                                        reserved
     d     mod_num                   10u 0                                      module number
     d     proc_num                  10u 0                                      procedure number
     d     num_stmt                  10u 0                                      number of stmt IDs
     d     int_id                     4a                                        internal ID
     d     pgm                         *                                        containing program
     d     stmts                     10u 0 dim(1)                               statement IDs
     d min_lblptr_info_len...
     d                 c                   52

     /* synchronization pointer attributes */
     d matptr_synptr_info_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0                                      bytes provided
     d     bytes_out                 10i 0                                      bytes available
     d     ptr_type                   1a                                        returned pointer type
     d     ptr_status                 1a                                        pointer status
     d     syn_obj_type...
     d                                2a                                        synchronization object type
     d                                1a
     d min_synptr_info_len...
     d                 c                   13

     /* MATPTR, materialize pointer attributes */
     d matptr          pr                  extproc('_MATPTR')
     d     receiver                    *   value
     d     ptr                         *

     d rslvsp_tmpl     ds                  qualified
     d     obj_type                   2a
     d     obj_name                  30a
     d     auth                       2a   inz(x'0000')

     d rslvsp2         pr                  extproc('_RSLVSP2')
     d     obj                         *
     d     opt                       34a

     /* TESTPTR, test pointer */
     d testptr         pr            10i 0 extproc('_TESTPTR')
     d     ptr                         *   value
     d     type                       1a   value

     /**
      * SETSPPFP, set space pointer from pointer
      * @attention this prototype does NOT work on a SYSPTR
      *            unless src_ptr is declared as a procptr?!
      * @todo      why?
      */
     d setsppfp        pr              *   extproc('_SETSPPFP')
     d     src_ptr                     *   value procptr

     /* SETSPFP, set system pointer from pointer */
     d setspfp         pr              *   extproc('_SETSPFP')
     d     src_ptr                     *   value

     /* end -- pointer resolution */

     /* space addressing */

     /* SETDP, set data pointer */
     d setdp           pr              *   extproc('_SETDP')
     d     addr                        *   value
     d     attr                       7a   value

     /* SETDPADR, set data pointer addressability */
     d setdpadr        pr              *   extproc('_SETDPADR')
     d     dtaptr                      *   value
     d     addr                        *   value

     /* end -- space addressing */

     /* space management */

     /**
      * CRTS template
      *
      * @remark obj_type, object type/subtype, must be hex 19EF
      */
     d crts_tmpl_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d     obj_type                   2a
     d     obj_name                  30a
     /*
      * create option, char(4)
      * bit 0, existence attribute, 0=temporary, 1=permanent
      * bit 1, length attribute, 0=fixed-length, 1=variable-length
      * bit 2, Initial context,
      *        0=Addressability is not inserted into context
      *        1=Addressability is inserted into context
      * bit 3, access group,
      *        0=Do not create as member of access group
      *        1=Create as member of access group
      * bit 4-5, reserved(binary 0)
      * bit 6, public authority specified, 0=no, 1=yes
      *        for a temporary space object, default pub-auth is *ALL;
      *        for a permanent space object, default pub-auth is *NONE.
      * bit 7, initial owner specified, 0=no, 1=yes
      *        a temporary space object does not have an owner
      * bit 8-11, reserved(binary 0)
      * bit 12, set public authority in operand 1, 0=no, 1=yes
      * bit 13, initialize space, 0=yes, 1=no
      * bit 14, automatically expand space, 0=no, 1=yes
      * bit 15-16, hardware storage protetion level
      *        00=reference and modify allowed for user state programs
      *        01=only reference allowed for user state programs
      *        10=invalid(yield template value invalid exception, hex 3801)
      *        11=no reference or modify allowed for user state programs
      * bit 17, process temporary space accounting
      *        0=the temporary space will be tracked to the creating process
      *        1=the temporary space will not be tracked to the creating process
      * bit 18-20, reserved(binary 0)
      * bit 21, always enforce hardware storage protection of space
      *        0=enforce hardware storage protection of this space
      *          only when hardware storage protection is being enforced
      *          for all storage.
      *        1=always enforce hardware storage protection of this space.
      * bit 22-31, reserved(binary 0)
      */
     d     crt_opt                    4a
     d                                2a
      * to specify the system ASP, use x'0000'
     d     asp_num                    2a
     d     spc_size                  10i 0
     d     init_val                   1a
     /*
      * performance class
      *
      * bit 0, space alignment; ignored if bit 3 is set to 1
      *   0=The space associated with the object is allocated to allow
      *     proper alignment of pointers at 16-byte alignments within the
      *     space. If the size of space field is zero, this value must be
      *     specified.
      *   1=The space associated with the object is allocated to allow proper
      *     alignment of pointers at 16-byte alignments within the space as
      *     well as to allow proper alignment of input/output buffers at
      *     512-byte alignments within the space.
      * bit 1, clear(or bring?) the space into main memory during creating
      *   0=Only a minimum amount (up to 4K) of the space will be in main
      *     storage upon completion of the instruction.
      *   1=Most of the space, with some limits enforced by the machine, will
      *     be in main storage upon completion of the instruction.
      * bit 2, Spread the space object among storage devices, 0=no, 1=yes
      * bit 3, Machine chooses space alignment
      *   0=the space alignment indicated by bit 0 is performed
      *   1=The machine will choose the space alignment most beneficial to
      *     performance, which may reduce maximum space capacity. When
      *     this value is specified, the space alignment field is
      *     ignored, but the alignment chosen will be a multiple of
      *     512. The maximum capacity for a space object for which the
      *     machine has chosen the alignment is returned by option Hex
      *     0003 of MATMDATA. The maximum space capacity for a
      *     particular space object is returned by MATS.
      * bit 4, Reserved (binary 0)
      * bit 5, Main storage pool selection,
      *   0=Process default main storage pool is used for object.
      *   1=Machine default main storage pool is used for object.
      * bit 6, Transient storage pool selection,
      *   0=Default main storage pool (process default or machine
      *     default as specified for main storage pool selection) is
      *     used for object.
      *   1=transient storage pool is used for object.
      * bit 7, Obsolete, This field is no longer used and will be ignored.
      * bit 8-15, Unit number
      * bit 16-23, reserved (binary 0)
      * bit 24-31, expanded transfer size advisory. specifies the
      *            desired number of pages to be transferred between
      *            main store and auxiliary storage for implicit
      *            access state changes. This value is only an
      *            advisory; the machine may use a value of its choice
      *            for performing access state changes under some
      *            circumstances. For example, the machine may limit
      *            the transfer size to a smaller value than is
      *            specified. A value of zero is an explicit
      *            indication that the machine should use the machine
      *            default storage transfer size for this object.
      */
     d     perf_cls                   4a
     d                                1a
     d     pub_auth                   2a
      * offset to template extension
     d     ext_offset                10i 0
      * context
     d     ctx                         *
      * access group
     d     acc_grp                     *

     /* template extension of CRTS */
     d crts_tmpl_ext_t...
     d                 ds                  qualified
     d     usrprf                      *
     d     max_spc_size_needed...
     d                               10i 0
      * hex 0000, domain is choosed by the machine
      * hex 0001, user domain
      * hex 8000, system domain
     d     domain                     2a
     d                               42a

     /* CRTS, create space */
     d crts            pr                  extproc('_CRTS')
     d     spcobj                      *
     d     crt_tmpl                    *   value

     /* DESS, create space */
     d dess            pr                  extproc('_DESS')
     d     spcobj                      *

     /* end -- space management */

     /* program execution */

     /* bound program activation definition template */
     d actbpgm_dfn_t   ds            32    qualified
     d     agp_mark                  10u 0
     d     act_mark                  10u 0
     d                                7a
     d     indicator                  1a
     d                               16a

     /* ACTBPGM, activate bound program */
     d actbpgm         pr                  extproc('_ACTBPGM')
     d     act_dfn                         likeds(actbpgm_dfn_t)
     d     pgm                         *

     /* MATACTEX, materialize activation export */
     d matactex        pr                  extproc('_MATACTEX')
     d     act_mark                  10u 0 value
      * 1=by export ID, 2=by name
     d     ind_type                  10u 0 value
      * export ID, start from 1
     d     number                    10u 0 value
     d     name                        *   value
      * returned procedure pointer
     d     proc_ptr                    *   procptr
      * 0=item not found
      * 1=procedure export
      * 2=data export
      * 3=inaccessible data export
     d     ext_type                  10u 0

     /* ACTPG, activate non-bound program */
     d actpg           pr                  extproc('_ACTPG')
     d     ssf                         *
     d     pgm                         *

     /* _DEACTPG1, deactivate non-bound program */
     d deactpg         pr                  extproc('_DEACTPG1')
     d     pgm                         *

     /**
      * _DEACTPG2
      *
      *  @todo when and how to use it??
      */
     d deactpg2        pr                  extproc('_DEACTPG2')
     d     pgm                         *

     /* MATPGMNM, materialize program name */
     d matpgmnm        pr                  extproc('_MATPGMNM')
     d     rcv_tmpl                        likeds(matpgmnm_tmpl_t)

     d matpgmnm_tmpl_t...
     d                 ds            80    qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d     format                    10i 0
     d                                4a
     d     ctx_type                   2a
     d     ctx_name                  30a
     d     bpgm_type                  2a
     d     bpgm_name                 30a
     d matpgmnm_tmpl_len...
     d                 c                   80

     /* INVP, returns invocation pointer */
     d invp            pr              *   extproc('_INVP')
      * relative invocation number; now must be 0
     d     relative_invocation_number...
     d                               10u 0 value

     /* basic attribute of a activation group */
     d agp_basic_attr_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d                                8a
     d     root_pgm                    *
     d                               16a
      * Storage address recycling key
     d     stg_addr_rcc_key...
     d                                 *
     d     agp_name                  30a
     d                                2a
     d     agp_mark                   4a
     d                                4a
     d     heap_cnt                  10u 0
     d     act_cnt                   10u 0
     d     stat_atg_size...
     d                               10u 0
     d                                4a
     d     agp_attr                   1a
      * Process access group (PAG) membership advisory attributes
     d     pag_adv                    1a
     d                                6a
     d     long_agp_mark...
     d                                8a

     /* list of heap ids of a activation group */
     d agp_heap_id_list_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d                                8a
     d     heap_id                   10i 0 dim(1)

     /* list of program activation entries */
     d agp_acte_list_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d                                8a
     d     act_ent                    4a   dim(1)

     /* MATAGPAT, materialize activation group attributes */
     d matagpat        pr                  extproc('_MATAGPAT')
     d     receiver                    *   value
     d     agp_mark                   4a
     d     attr_sel                   1a

     /* basic activation attributes */
     d act_basic_attr_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d                                8a
     d     pgm                         *
     d     act_mark                   4a
     d     agp_mark                   4a
     d     inv_cnt                   10u 0
     d     ssf_cnt                   10u 0
     d     pgm_type                   1a
     d     act_attr                   1a
     d     tgt_agp                    1a
     d                                1a
      * dependent activation count
     d     dep_act_cnt...
     d                               10u 0
     d     long_act_mark...
     d                                8a
     d     long_agp_mark...
     d                                8a

     /* SSF list entry */
     d ssf_liste_t...
     d                 ds                  qualified
     d     ssf_ptr                     *
     d     ssf_size                  10u 0
     d                               12a

     /* SSF list of an program activation entry */
     d act_ssf_list_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d                                8a
     d     ssf_ent                         likeds(ssf_liste_t)
     d                                     dim(1)

     /* dependent activation entries of an program activation entry */
     d act_dep_acte_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d                                8a
     d     dep_act                    4a   dim(1)

     /* MATACTAT, materialize activation attributes */
     d matactat        pr                  extproc('_MATACTAT')
     d     receiver                    *   value
     d     act_mark                   4a
     d     attr_sel                   1a

     /* end -- program execution */

     /* program execution */

     /* MODASA, modify automatic storage allocation */
     /* Note that unlike MI instruction MODASA, builtin _MODASA */
     /* cannot be used to truncate ASF */
     d modasa          pr              *   extproc('_MODASA')
     d     mod_size                  10u 0 value

     /**
      * NPM_PARMLIST_ADDR, npm procedure parameter list address.
      *
      * @return space pointer to a npm_plist_t structure
      */
     d npm_plist       pr              *   extproc('_NPMPARMLISTADDR')

     d npm_plist_t     ds                  qualified based(dummy_ptr)
     d     parm_desc_...
     d       list                      *
     d     mch_wrk_...
     d       ara                     16a
     d     argvs                       *   dim(400)

     d parm_desc_...
     d       list_t    ds                  qualified based(dummy_ptr)
     d     argc                      10i 0

     /* MATINVE, materialize invocation entry */
     /* @todo MCH4227! */
     d*matinve         pr                  extproc('_MATINVE')
     d*    receiver                    *   value
     d*    option                    10u 0 value

     /* MATINVAT, materialize invocation attributes */
     d matinvat        pr                  extproc('_MATINVAT1')
     d     receiver                    *   value
     d     selection                   *   value

     /* receiver template when materializing ASF pointer */
     d matinvat_selection_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     num_attr                  10i 0
     d     flag1                      1a
     d                                3a
     d     ind_offset                10i 0
     d     ind_length                10i 0
     d     attr_id                   10i 0
     d     flag2                      1a
     d                                3a
     d     rcv_offset                10i 0
     d     rcv_length                10i 0

     /* length of DS matinvat_selection_t */
     d matinvat_selection_length...
     d                 c                   32

     /* receiver template when materializing ASF pointer; option 2 */
     d matinvat_asf_receiver_t...
     d                 ds                  qualified
     d     asf_ptr                     *

     /* receiver template when materializing AG mark; option 14 */
     d matinvat_ag_mark_rcv_t...
     d                 ds            16    qualified
     d     ag_mark                   10u 0
     d                               12a

     /* end -- program execution */

     /* heap management */

     /* ALCHSS, allocate activation group-based heap space storage */
     d alchss          pr              *   extproc('_ALCHSS')
     d     heap_id                   10i 0 value
     d     size                      10i 0 value

     /* FREHSS, free activation group-based heap space storage */
     d frehss          pr                  extproc('_FREHSS')
     d     ptr                         *   value

     /* CRTHS template */
     d crths_tmpl_len  c                   96
     d crths_tmpl_t    ds            96    qualified
     d                                     based(dummy_ptr)
     d                                8a
     d     max_alloc                 10u 0
     d     min_bdry                  10u 0
     d     crt_size                  10u 0
     d     ext_size                  10u 0
     d     domain                     5i 0
     d     crt_option                 6a
     d                               64a

     /* CRTHS, create AG-based heap space */
     d crths           pr                  extproc('_CRTHS')
     d     heap_id                   10i 0
     d     crt_tmpl                        likeds(crths_tmpl_t)

     /* MATHSAT, materialize activation group-based heap space attributes */
     d mathsat         pr                  extproc('_MATHSAT')
     d     tmpl                        *   value
     d     head_id_tmpl...
     d                                 *   value
     d     selection                  1a

     /* MATHSAT template */
     d mathsat_tmpl_len...
     d                 c                   128
     d mathsat_tmpl_t  ds           128    qualified
     d                                     based(dummy_ptr)
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d     max_alloc                 10u 0
     d     min_bdry                  10u 0
     d     crt_size                  10u 0
     d     ext_size                  10u 0
     d     domain                     5i 0
     d     crt_option                 6a
     d                               64a
     d     cur_out_alc...
     d                               10u 0
     d     num_realc                 10u 0
     d     num_free                  10u 0
     d     num_alc                   10u 0
     d     max_out_alc...
     d                               10u 0
     d     stg_unit_size...
     d                               10u 0
     d     num_marks                 10u 0
     d     num_ext                   10u 0

     /* MATHSAT's heap id template */
     d heap_id_t       ds            16    qualified
     d    ag_mark                    10u 0
     d    heap_id                    10u 0

     /* SETHSSMK, set activation group-based heap space storage mark */
     d sethssmk        pr                  extproc('_SETHSSMK')
     d     mark                        *
     d     heap_id                   10i 0

     /* FREHSSMK, free activation group-based heap space storage from mark */
     d frehssmk        pr                  extproc('_FREHSSMK')
     d     mark                        *

     /* DESHS, destroy AG-based heap space */
     d deshs           pr                  extproc('_DESHS')
     d     heap_id                   10i 0

     /* end -- heap management */

     /* independent index */

     /* template of CRTINX */
     d crtinx_tmpl_t   ds                  qualified
     d                                     based(dummy_ptr)
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d     obj_type                   2a
     d     obj_name                  30a
      * creation option
     d     crt_opt                    4a
      * recovery option
     d     rcvy_opt                   4a
     d     spc_size                  10i 0
     d     init_spc_val...
     d                                1a
      * performance class
     d     perf_cls                   4a
     d                                3a
      * extension offset
     d     ext_offset                10i 0
     d     ctx                         *
     d     acc_grp                     *
     d     inx_attr                   1a
      * argument length
     d     arg_len                    5i 0
      * key length
     d     key_len                    5i 0
      * longer template
     d                               12a
      * template version, must be hex 00
     d     tmpl_ver                   1a
      * index format,
      *   0=maximum object size of 4G bytes
      *   1=maximum object size of 1T bytes
     d     inx_fmt                    1a
     d                               61a

      * template extension of CRTINX
     d crtinx_tmpl_ext_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     usrprf                      *
     d                                4a
      * domain assigned to created object
      *   hex 0000=the domain will be choosed by the machine
      *   hex 0001=user domain
     d     obj_domain                 2a
     d                               42a

     /* template of MATINXAT */
     d matinxat_tmpl_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d     obj_type                   2a
     d     obj_name                  30a
      * creation option
     d     crt_opt                    4a
      * recovery option
     d     rcvy_opt                   4a
     d     spc_size                  10i 0
     d     init_spc_val...
     d                                1a
      * performance class
     d     perf_cls                   4a
     d                                3a
      * extension offset
     d     ext_offset                10i 0
     d     ctx                         *
     d     acc_grp                     *
     d     inx_attr                   1a
      * argument length
     d     arg_len                    5i 0
      * key length
     d     key_len                    5i 0
      * index statistics
     d     entries_inserted...
     d                               10u 0
     d     entries_removed...
     d                               10u 0
     d     find_operations...
     d                               10u 0

     /* CRTINX, create independent index */
     d crtinx          pr                  extproc('_CRTINX')
     d     index                       *
     d     tmpl                        *   value
     d

     /* DESINX, destroy independent index */
     d desinx          pr                  extproc('_DESINX')
     d     index                       *

     /* MATINXAT, materialize independent index attributes */
     d matinxat        pr                  extproc('_MATINXAT')
     d     attr                        *   value
     d     index                       *

     /* option list structure used by INSINXEN and FNDINXEN */
     d inx_option_list_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     rule_opt                   2a
     d     arg_len                    5u 0
     d     arg_offset                 5i 0
     d     occ_cnt                    5i 0
     d     rtn_cnt                    5i 0
      * offset 10
      * returned index entries: entry length 5u0, offset 5i0

     d inx_entry_length_offset_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     length                     5u 0
     d     offset                     5i 0

     /* INSINXEN, insert independent index entry */
     d insinxen        pr                  extproc('_INSINXEN')
     d     index                       *
     d     argument                    *   value
     d     opt_list                    *   value

     /* FNDINXEN, find independent index entry */
     d fndinxen        pr                  extproc('_FNDINXEN')
     d     receiver                    *   value
     d     index                       *
     d     opt_list                    *   value
     d     argument                    *   value

     /* RMVINXEN, remove independent index entry */
     d rmvinxen        pr                  extproc('_RMVINXEN1')
     d     receiver                    *   value
     d     index                       *
     d     opt_list                    *   value
     d     argument                    *   value

     /* template of MODINX */
     d modinx_tmpl_t   ds                  qualified
      * bit 1, immediate update
      *   0=do not modify
      *   1=modify
      * bit 2, index coherency tracking
      *   0=do not modify
      *   1=modify
     d     mod_sel                    1a
      * bit 1, immediate update
      *   0=no immediate update
      *   1=immediate update
      * bit 2, index coherency tracking
      *   0=do not track index coherency
      *   1=track index coherency
     d     new_attr                   1a
     d     reserved                   2a

     /* MODINX, modify independent index */
     d modinx          pr                  extproc('_MODINX')
     d     index                       *
     d     opt                         *   value

     /* end -- independen index */

     /* queue management */

     /* message prefix used by instruction ENQ */
     d enq_prefix_t    ds                  qualified
     d     msg_len                   10i 0
      * for keyed queue objects
     d     msg_key                  256a

     /* enqueue to a queue object */
     d enq             pr                  extproc('_ENQ')
     d     queue                       *
     d     msg_prefix                  *   value
     d     msg                         *   value

     /* message prefix used by instruction DEQ */
     d deq_prefix_t    ds                  qualified
     d     deq_time                   8a
     d     time_out                   8a
     d     msg_len                   10i 0
     d     state_flag                 1a
      * for keyed queue objects; input key, output key
     d     msg_keys                 512a

     /* dequeue from a queue object without waiting */
     d deqi            pr            10i 0 extproc('_DEQI')
     d     msg_prefix                  *   value
     d     msg                         *   value
     d     queue                       *

     /* dequeue from or wait on a queue object */
     d deqwait         pr                  extproc('_DEQWAIT')
     d     msg_prefix                  *   value
     d     msg                         *   value
     d     queue                       *

     /* end -- queue management */

     /* mutex management */
     d mutex_t         ds                  qualified
      * synchronization pointer
     d     syn_ptr                     *
     d     name                      16a

     /* CRTMTX template */
     d crtmtx_option_t...
     d                 ds                  qualified
     d                                1a
     d     name_opt                   1a
     d     keep_valid_opt...
     d                                1a
     d     recursive_opt...
     d                                1a
     d                               28a

     /**
      * CRTMTX (create pointer-based mutex)
      *
      * @return 0 if the mutex is created; otherwise an error number.
      */
     d crtmtx          pr            10i 0 extproc('_CRTMTX')
     d     mtx                             likeds(mutex_t)
     d     crt_opt                     *   value

     /**
      * DESMTX (destroy pointer-based mutex)
      *
      * @return 0 if the mutex is created; otherwise an error number.
      */
     d desmtx          pr            10i 0 extproc('_DESMTX')
     d     mtx                             likeds(mutex_t)
     d     des_opt                     *   value

     /* LOCKMTX template */
     d lockmtx_tmpl_t...
     d                 ds                  qualified
     /* hex 00 = wait infinitely
      * hex 01 = wait for the mutex for the specified amount of
      *          time. If the mutex still cannot be obtained, the
      *          EAGAIN error number is returned.
      * hex 02 = return immmediately with an EBUSY error number.
      */
     d     timeout_opt...
     d                                1a
     /*
      * bit 1, wait time-out format
      *   0 = time-out is specified in seconds/microseconds
      *   1 = time-out is a 8-byte system clock value
      *
      * bit 2, MPL control during wait
      *   0 = remain in the current MPL set
      *   1 = do not remain in the current MPL set
      *
      * bit 3, asynchronous signals processing option
      *   0 = do not allow asynchronous signal processing during mutex wait
      *   1 = allow asynchronous signal processing during mutex wait
      *
      * bit 4, wait type
      *   0 = normal wait
      *   1 = restrict wait
      *
      * @remark The wait type option is used by kernel-mode programs
      *         or procedures to specify what type of wait to
      *         perform. The wait type field is ignored when the
      *         thread execution mode is not kernel-mode.
      */
     d     lock_opt                   1a
     d                                6a
     d     timeout                    8a

     /* LOCKMTX, lock pointer-based mutex */
     d lockmtx         pr            10i 0 extproc('_LOCKMTX')
     d     mtx                             likeds(mutex_t)
     d     request                     *   value

     /* UNLKMTX, unlock ponter-based mutex */
     d unlkmtx         pr            10i 0 extproc('_UNLKMTX')
     d     mtx                             likeds(mutex_t)

     /* MATMTX, materialize mutex */
     d matmtx          pr                  extproc('_MATMTX')
     d     reciever                    *   value
     d     mtx                             likeds(mutex_t)
     d     opt                         *   value

     /* basic mutex attribute template */
     d mutex_basic_attr_t...
     d                 ds            80    qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d                                4a
     d     num_waiters...
     d                               10i 0
     d     name                      16a
     d     owner_process_id...
     d                               30a
     d                               18a

     /* basic mutex attribute template */
     d mutex_basic_attr2_t...
     d                 ds            80    qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d                                4a
     d     num_waiters...
     d                               10i 0
     d     name                      16a
     d     owner_process_id...
     d                               30a
     d                                2a
     d     owner_thread_id...
     d                                8a
     d     owner_thread_unique_value...
     d                                8a

     /* basic mutex attribute template */
     d mutex_basic_attr3_t...
     d                 ds           240    qualified
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d                                4a
     d     num_waiters...
     d                               10i 0
     d     name                      16a
     d     owner_process_id...
     d                               30a
     d                                2a
     d     owner_thread_id...
     d                                8a
     d     owner_thread_unique_value...
     d                                8a
     d     last_locker_process_id...
     d                               30a
     d                                2a
     d     last_locker_thread_id...
     d                                8a
     d     last_locker_thread_unique_value...
     d                                8a
     d     last_unlocker_process_id...
     d                               30a
     d                                2a
     d     last_unlocker_thread_id...
     d                                8a
     d     last_unlocker_thread_unique_value...
     d                                8a
      * 00 = recursive attempls to lock this mutex will not
      *      be permitted
      * 01 = recursive attempls to lock this mutex will be permitted
      *      by the same thread has already locked the MTX
     d     recursive_flag...
     d                                1a
     d     keep_valid_flag...
     d                                1a
      * 00 = holding thread has not terminated
      * 01 = holding thread has terminated
     d     pending_flag...
     d                                1a
     d                               13a
     d     lock_count                20u 0
      * first 8 characters of the name of the program module
      * that created the mutex
     d     creator                    8a
     d     original_mutex...
     d                                 *
     d                               16a

     /* mutex waiter structure */
     d mutex_waiter_t  ds            48    qualified
     d     process_id                30a
     d                               18a

     /* mutex waiter structure */
     d mutex_waiter2_t...
     d                 ds            48    qualified
     d     process_id                30a
     d                                2a
     d     thread_id                  8a
     d     thread_unique_value...
     d                                8a

     /* standard materialization template of MATMTX */
     d matmtx_std_tmpl_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     basic_attr                      likeds(mutex_basic_attr_t)
     d     waiters                         likeds(mutex_waiter_t)
     d                                     dim(1024)

     /* format 0 extended materialization template of MATMTX */
     d matmtx_ext0_tmpl_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     basic_attr                      likeds(mutex_basic_attr2_t)
     d     waiters                         likeds(mutex_waiter2_t)
     d                                     dim(1024)

     /* format 1 extended materialization template of MATMTX */
     d matmtx_ext1_tmpl_t...
     d                 ds                  qualified
     d                                     based(dummy_ptr)
     d     basic_attr                      likeds(mutex_basic_attr3_t)
     d     waiters                         likeds(mutex_waiter2_t)
     d                                     dim(1024)

     /* end -- mutex management */

     /* context management */

     /* MATCTX option structure */
     d matctx_option_t...
     d                 ds            46    qualified
     d     sel_flag                   1a                                        selection flag
     d     sel_criteria...
     d                                1a                                        selection criteria
     d     name_len                   5i 0                                      selection name length
     d     obj_type                   1a                                        object type code
     d     obj_subtype...
     d                                1a                                        object sub-type code
     d     name                      30a                                        object name
     d     timestamp...
     d                                8a                                        selection timestamp
     d     asp_num                    2a                                        indepedent ASP number

     /* length of MATCTX option structure */
     d matctx_option_length...
     d                 c                   46

     /* MATCTX template */
     d matctx_receiver1_t...
     d                 ds                  qualified
     d     bytes_in                  10i 0                                      bytes provided
     d     bytes_out                 10i 0                                      bytes available
     d     ctx_type                   2a                                        context type/sub-type
     d     ctx_name                  30a                                        context name
     d     ctx_opt                    4a                                        context options
     d     rcvy_opt                   4a                                        recovery options
     d     spc_size                  10i 0                                      space size
     d     spc_init_val...
     d                                1a                                        initial value of space
     d     perf_cls                   4a                                        performance class
     d                               23a                                        reserved
     d     acc_grp                     *                                        access groupd

     d matctx_offset1...
     d                 c                   96

     /* MATCTX, materialize context */
     d matctx1         pr                  extproc('_MATCTX1')
     d     receiver                    *   value
     d     option                    46a

     d matctx2         pr                  extproc('_MATCTX2')
     d     receiver                    *   value
     d     ctx                         *
     d     option                    46a

     /* end -- context management */

     /* authorization management */

     /* MATAUU template */
     d matauu_tmpl_t   ds            16    qualified
     d                                     based(dummy_ptr)
     d     bytes_in                  10i 0
     d     bytes_out                 10i 0
     d     public_auth...
     d                                2a
     d     num_private_users...
     d                                5i 0
     d     reserved                   4a

     /* long format privately authorized USRPRF struction */
     d auth_desc_long_t...
     d                 ds            80    qualified
     d                                     based(dummy_ptr)
     d     usrprf_type...
     d                                2a
     d     usrprf_name...
     d                               30a
     d     private_auth...
     d                                2a
     d     reserved                  12a
     d     usrprf                      *

     /* length of structure auth_desc_long_t */
     d AUTH_DESC_LONG_LENGTH...
     d                 c                   64

     /* MATAUU, materialize authorized users */
     d matauu          pr                  extproc('_MATAUU')
     d     receiver                    *   value
     d     obj                         *
     d     option                     1a

     /* end -- authorization management */

     /* process and thread management */

     /* PCOPTR, returns a SPCPTR to the PCO (process communication object) object */
     d pcoptr          pr              *   extproc('_PCOPTR')

     /* PCOPTR2, returns a SPCPTR to the PCO (process communication object) object */
     d pcoptr2         pr              *   extproc('_PCOPTR2')

     /* MATPRAGP, materialize process activation groups */
     d matpragp        pr                  extproc('_MATPRAGP')
     d     receiver                    *   value

     d matpragp_...
     d   tmpl_t        ds                  qualified
     d                                     based(dummy_ptr)
     d     buf                    65535a
     d     bytes_in                  10i 0 overlay(buf : 1)
     d     bytes_out                 10i 0 overlay(buf : 5)
     d     agp_num                   10i 0 overlay(buf : 9)
     d     agp_marks                  4a   dim(16380)
     d                                     overlay(buf : 13)

     /* RETTHID, retrieve thread identifier */
     d retthid         pr             8a   extproc('_RETTHID')

     /* WAITTIME, wait on time */
     d waittime        pr                  extproc('_WAITTIME')
     d     wait_tmpl                 16a

     /* wait template for WAITTIME */
     d wait_tmpl_t     ds            16    qualified
     d     interval                   8a
     d     option                     2a
     d                                6a

     /* end -- process and thread management */

     /* Machine Observation */

     /**
      * TESTTOBJ, test temporary object
      *
      * @return 1 if syp points to a temporary object, otherwise 0.
      */
     d testtobj        pr            10i 0 extproc('_TESTTOBJ')
     d     syp                         *

     /* end -- Machine Observation */

     /* undocumented system builtins */

     /* jump buffer structure used by __setjmp, and libc procedure longjmp() */
     d jmp_buf_t       ds                  qualified 
     d     inv_ptr                     *             
     d     lbl_ptr                     *             
     d     num                       10i 0           

     /* __setjmp */
     d setjmp          pr            10i 0 extproc('__setjmp')
     d     jmpbuf                          likeds(jmp_buf_t)

     /* __setjmp2 */
     d setjmp2         pr                  extproc('__setjmp2')
     d     lbl_ptr                     *

     /* returns a space pointer to the SEPT */
     d sysept          pr              *   extproc('_SYSEPT')

     /* returna a system pointer to current process' QTEMP */
     d qtempptr        pr              *   extproc('_QTEMPPTR')

     /* end -- undocumented system builtins */

      /endif
     /* eof - mih52.rpgleinc */
