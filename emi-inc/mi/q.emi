/**
 * This file is part of i5/OS Programmer's Toolkit.
 * 
 * Copyright (C) 2010, 2011  Junlei Li (李君磊).
 * 
 * i5/OS Programmer's Toolkit is free software: you can redistribute
 * it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * i5/OS Programmer's Toolkit is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with i5/OS Programmer's Toolkit.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

/**
 * @file q.emi
 *
 * Instruction templates for queue management instructions
 */

/ifndef __emi_q_h__           ;
/define __emi_q_h__           ;

/**
 * enq-t
 * For operand 2 of the MI instruction ENQ
 * @example test/
 */
dcl spc enq-t bas(*)            ;
        dcl dd enq?msg-len bin(4) dir ; /* Size of message to be enqueued */
        dcl dd enq?key char(256) dir ;  /* valid only for keyed queues */

/**
 * deq-t
 *
 * For operand 1 (message prefix) of instruction DEQ.
 * @example test/e001.emi
 */
dcl spc deq-t bas(*)            ;
        dcl dd deq?enq-timestamp   char(8) dir ; /* OUTPUT. Timestamp of enqueue of message */
        dcl dd deq?timeout         char(8) dir ; /* Dequeue wait time-out value. (Ignored if B form is used) */
        dcl dd deq?msg-size        bin(4)  dir ; /* OUTPUT. Size of message dequeued, max 64K */
        dcl dd deq?option          char(1) dir ;
        dcl dd deq?search-arg-len  char(1) dir ; /* Length of input search argument, max 256. Ignored for FIFO/LIFO queues. */
        /*
        dcl dd deq?search-arg  char(key-length) ; length of the key data of the dequeued message
        dcl dd deq?key-return  char(key-length) ; key data of the dequeued message
        */
/* Length of deq-t not including the input search-arg and output key-returned  */
dcl con deq-t-len bin(2) unsgnd init(21) ;

/**
 * deq-q-t
 * Queue template for operand 3 of DEQ.
 */
dcl spc deq-q-t bas(*)          ;
        dcl sysptr deq-q-t?q    dir ;
        dcl dd deq-q-t?ext-opt  char(1) dir ;
        dcl dd deq-q-t?ext-new-thd-mask bin(2) dir ;
        dcl dd deq-q-t?ext-old-thd-mask bin(2) dir ;
        dcl dd *                char(11) dir       ; /* Reserved (binary 0) */

/**
 * matqat-t
 * Materialization template of MATQAT.
 * @example test/e005.emi
 */
dcl spc matqat-t bas(*)         ;
        dcl dd matqat?bytes-in  bin(4) dir ;
        dcl dd matqat?bytes-out bin(4) dir ;
        dcl dd matqat?obj-type  char(2) dir ;
        dcl dd matqat?obj-name  char(30) dir ;
        dcl dd matqat?crt-opt   char(4) dir  ;
        dcl dd *                char(4) dir  ;
        dcl dd matqat?spc-size  bin(4) dir   ;
        dcl dd matqat?init-val  char(1) dir  ;
        dcl dd matqat?perf-cls  char(4) dir  ;
        dcl dd *                char(7) dir  ;
        dcl sysptr matqat?ctx   dir          ;
        dcl sysptr matqat?access-grp dir     ;
        dcl dd matqat?q-attr    char(1) dir  ;
        dcl dd matqat?cur-max-msgs bin(4) dir ;
        dcl dd matqat?cur-msgs  bin(4) dir    ;
        dcl dd matqat?ext-value bin(4) dir    ;
        dcl dd matqat?key-len   bin(2) dir    ;
        dcl dd matqat?max-msg-len bin(4) dir  ;
        dcl dd *                char(1) dir   ;
        dcl dd matqat?max-extends bin(4) dir  ;
        dcl dd matqat?cur-extends bin(4) dir  ;
        dcl dd matqat?init-msgs bin(4) dir    ;
dcl con matqat-t-len bin(2) init(128)         ;
dcl dd matqat?tmpl char(128) bas(*)           ; /* can be used to clear allocated AUTO storage */

/**
 * matqmsg-t
 * Materialization template of MATQMSG for operand 1 of MATQMSG
 *
 * @example test/e006.emi
 */
dcl spc matqmsg-t bas(*)        ;
        dcl dd matqmsg?bytes-in bin(4) dir ;
        dcl dd matqmsg?bytes-out bin(4) dir ;
        dcl dd matqmsg?msgs-out bin(4) dir  ;
        dcl dd matqmsg?msgs-on-q bin(4) dir ;
        dcl dd matqmsg?max-msg-len bin(4) dir ;
        dcl dd matqmsg?key-len  bin(4) dir    ;
        dcl dd *                char(8) dir   ;
        /* Message data (repeated for each message) */
dcl con matqmsg-t-len bin(2) init(32) ;
dcl dd matqmsg?tmpl char(32) bas(*) ; /* can be used to clear allocated AUTO storage */

/**
 * magqmsg-
 * Message selection template of MATQMSG for operand 3 of MATQMSG.
 * @example test/e006.emi
 */
dcl spc matqmsg-select-t bas(*) ;
        /*
        bits 0-3, type
          0001 = All messages
          0010 = First
          0100 = Last
          1000 = Keyed
        bits 4-7, key relationship (if needed)
          0010 = Greater than
          0100 = Less than
          0110 = Not equal
          1000 = Equal
          1010 = Greater than or equal
          1100 = Less than or equal
        */
        dcl dd matqmsg-select?option char(2) dir ;
        dcl dd matqmsg-select?mat-key-size   bin(4) dir ;
        dcl dd matqmsg-select?mat-msg-size   bin(4) dir ;
        dcl dd *                             char(6) dir ;
        /* Input key value if needed */
dcl con matqmsg-select-t-len bin(2) init(16) ;
dcl dd matqmsg-select?tmpl char(16) bas(*)   ;

/* @remark 这所以这样要求是为了当 message 当中含有 pointer 时, operand-1 中返回的内容中 pointer 可以保证被对齐到 16-byte boundaries
The length of the message key and message text fields is determined by values supplied in operand 3, message selection data. If the length supplied in operand 3 exceeds the actual data length, the remaining space will be padded with binary zeros.

Both of the fields specified under lengths must be zero or an integer multiple of 16. The maximum value allowed for the key length is 256. The maximum value allowed for the message text is 65,536.
*/

/**
 * A queue entry returned by MATQMSG
 */
dcl spc matqmsg-entry-t bas(*)  ;
        dcl dd matqmsg-entry?time-enqueued char(8) dir ;
        dcl dd matqmsg-entry?msg-len       bin(4) dir  ;
        dcl dd *                           char(4) dir ;
        /* key data */
        /* message */
dcl con matqmsg-entry-t-len bin(2) init(16) ;

/endif                          ;
/* EOF - q.emi */
