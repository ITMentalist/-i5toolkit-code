/*
This file is part of i5/OS Programmer's Toolkit.

Copyright (C) 2010, 2011  Junlei Li (李君磊).

i5/OS Programmer's Toolkit is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

i5/OS Programmer's Toolkit is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with i5/OS Programmer's Toolkit.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file mic.hpp
 *
 * project's common header
 */

# ifndef __mic_hpp__
# define __mic_hpp__

// libc
# include <time.h>

// posix
# include <regex.h>

// includes
#   include <mic-def.h>
#   include <cpp-common.hpp>
#   include <utils-in.hpp>

// c++ classes
#   include <mic_ex.hpp>
#   include <stmt.hpp>
#   include <builtin.hpp>

/**
 * namespace used by MIC
 */
namespace mic {

  /**
   * get a builtin-number from mic::builtin_name_number_map_ by name
   *
   * @param[in] name, builtin name
   * @param[out] number, builtin number
   *
   * @return char *, NULL if <var>name</var> is nout found
   */
  char* get_builtin_number_by_name(const char *name);

  // phase-a

  /**
   * eleminates comments;
   * convert control character (e.g. '\t', '\n', '\r') to whitespaces;
   * @see _CONTROL_CHARS
   *
   * @param[in] input, input source string
   * @param[in] output, output source string;
   *            allocated by the caller, which is expected not shorter than input.
   * @param[in] len, length of input source string.
   */
  void phase_a0(const char *input, char *output, size_t len);

  /**
   * fetch each statement object from output of mic::phase_a0()
   *
   * @param[out] stmts, reference to an instance of type mic::stmtlist_t
   * @param[in] input, source stream generated by mic::phase_a0()
   *
   * @return size of returned statement list
   */
  size_t phase_a1(stmtlist_t& stmts, char* input);

  /**
   * decision criteria
   *  - the first non-blank character is '/'
   *  - '/'后面出现include path-name，空格数不限
   *  - 如果路径中含space，需要使用`"' quote
   *    - 不允许用 single quote 括，不然处理麻烦
   * 
   * @param[in] stmt
   * @param[out] path name
   *
   * @return true is <var>s<var> is a include directive, otherwise false
   * @todo is_include()中对micex的使用
   */
  bool is_include(const std::string& s, std::string& inc_path)
    throw(compiler_ex_t, mic::internal_ex_t)
    ;

  /**
   * phase A, step 2
   *
   * load includes
   *
   * @return true if directive include is found
   *
   * @todo phase_a2()要throw的exception
   */
  bool phase_a2(
                stmtlist_t& stmts,
                const stringlist_t& inc_dirs,
                int& depth
                )
    throw(compiler_ex_t)
    ;

  /**
   * make UPPER
   *
   * skip constants quoted by ' and "
   */
  void phase_a3(stmtlist_t& l);

  typedef enum tag_cond_directive_type {

    directive_define = 0x01,
    directive_undef  = 0x02,
    directive_ifdef  = 0x03,
    directive_ifndef = 0x04,
    directive_endif  = 0x05,
    directive_else   = 0x06,
    directive_unknown   = 0xFF

  } cond_directive_type_t;

  /**
   * does a statement contains a conditional directive
   */
  bool
  is_cond_directive(
                    const std::string &s,
                    mic::cond_directive_type_t &dir_type,
                    std::string &operand
                    )
    throw(compiler_ex_t)
    ;

  /**
   * do AND operation using all elements on a stack
   */
  bool and_bool_stack(const std::stack<bool>& stk);

  /**
   * deal with conditional directives
   */
  void phase_a4(stmtlist_t& l);

  /**
   * phase A
   */
  void phase_a(const char* source, stmtlist_t& stmts, stringlist_t inc_dirs);

  /**
   * load pre-defined builtins
   */
  void load_builtins(builtinmap_t&);

  /**
   * phase B
   *
   * - search for all builtin invocations
   * - replace builtin invocations, and insert builtin bodies into stmts

     procedure
     @code
     PRE:
       builtinmap_t bmap;
       load_builtins(bmap);

     START:
       string b_name;
       list<string> bused;
       it_pend;
       for s int stmts;
         do
         if is_pend(s);
           then
           save it_pend;
           break;
         fi;

         if call_builtin(s, b_name);
           then
           b_it = bmap.find(b_name);
           if b_it != bmap.end();
             b_it->replace(stmts, s_it, bused);
           fi;
         fi;
       done;

       // no pend
       if it_pend == stmts.end();
         // throw exception
       fi;

       for b_name in bused;
         do
         b_it = bmap.find(b_name);
         stmt.insert(it_pend, b_it->body());
       done;

     @endcode

   * @param[in,out] stmts, statement collection
   * @param[in] m, collection of registered builtins
   *
   * @return void
   */
  void phase_b(stmtlist_t& stmts, builtinmap_t& m)
    throw(compiler_ex_t, internal_ex_t)
    ;

  /**
   * dump statements to a stl string
   *
   * dump_stmts write both a stmt_t's comment and statement text to <var>output</var>.
   */
  void dump_stmts(const stmtlist_t& stmts, std::string& output);

  /**
   * dump statements to a readable stream file
   *
   * dump_stmts write both a stmt_t's comment and statement text to <var>output</var>.
   */
  void dump_stmts2(const stmtlist_t& stmts, const std::string& path);

  /**
   * dump statements to stdout
   */
  void dump_stmts3(const stmtlist_t& stmts);

  /**
     phase C

     - 使用phase B产出的stmt集合，出 source string
     - source string + MIC's parameters ==> QPRCRTPG
     - post compilation actions: 输出编译过程list info啥啥的

     @param[in] stmts
     @param[in] command parameters
   */
  void phase_c(stmtlist_t& stmts, mic_cmd_param_t& mic_parm)
    throw(internal_ex_t)
    ;

  /**
   * ... ...
   *
   * @todo print_listinfo()要单独UT，design
   *
   * @param start_from, CYYMMDDHHMMSS
   * @param prtf, print file name
   */
  void print_listinfo(const char *start_from, const char* prtf);

  /**
   * returns AS/400 exception descriptions
   *
   * @param api_error_code, of type Qus_EC_t
   */
  std::string retrieve_exception_description(void* api_error_code);

  /**
   * report exception to user
   */
  void report_exception(exbase_t::mic_ex_type_t type, const std::string& info, bool from_shell);

  /// returns CCSID of currrent job
  int get_job_ccsid();

  /// returns name of a job's current library
  void get_cur_lib(char *curlib);

  /**
   * read ifs source file
   *
   * @param[in] path, source file path
   * @param[in] search_dirs, ....
   */
  std::string
  read_source_file(
                   const std::string& path,
                   const stringlist_t& inc_dirs
                   ) throw(compiler_ex_t);

};

# endif // __mic_hpp__
