/**
 * This file is part of i5/OS Programmer's Toolkit.
 * 
 * Copyright (C) 2010, 2011  Junlei Li (李君磊).
 * 
 * i5/OS Programmer's Toolkit is free software: you can redistribute it
 * and/or modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * i5/OS Programmer's Toolkit is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with i5/OS Programmer's Toolkit.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

package u;

/**
 * Creation template of MI instruction CRTINX
 *
 * The creation template generated by this class can be used to
 * created a temporary independent index object.  The addressibility
 * of a temporary object is not inserted into a context object. The
 * owner of the newly created index object will the current user
 * profile of the current job.
 */
public class CRTINXTmpl implements InstructionTemplate {

    // Variable-length entries
    public boolean var_length_ = false;
    // Immediate update
    public boolean immed_update_ = false;
    // Key insertion
    public boolean insert_by_key_ = false;
    // Can contains pointer data objects?
    public boolean ptr_data_ = false;
    /**
     * Optimized processing mode
     *  false = optimized for random references
     *  true  = optimized for sequential references
     */
    public boolean opt_for_seq_ = false;
    // Index coherency tracking
    public boolean track_coherency_ = false;

    // Object name
    private String name_;
    // Argument length
    private int arg_len_;
    // Key length
    private int key_len_;

    // Template length. This is the length of the longer creation
    // template for the CRTINX instruction
    public static final int TMPL_LEN = 176;

    // Creation option (temporary, do not insert addressiblity in context)
    public static final int CREATION_OPTION = 0x00000000;
    // Recovery option: ASP number = 0
    public static final int RECOVERY_OPTION = 0x00000000;
    // INDEX_FORMAT: Maximum object size of 1 Terabyte.
    public static final int INDEX_FORMAT = 0x01;

    /// ctor
    public CRTINXTmpl (String name, int arg_len, int key_len) {

        name_ = name;
        arg_len_ = arg_len;
        key_len_ = key_len;
    }

    public byte[] toBytes()
        throws java.io.IOException
    {
        // index name
        String name = name_;
        while(name.length() < 30)
            name += ' ';

        // index attributes
        int inx_attr = 1; // bit-7 = 1, with longer tmpl
        if(var_length_)
            inx_attr |= 0x80;
        if(immed_update_)
            inx_attr |= 0x40;
        if(insert_by_key_)
            inx_attr |= 0x20;
        if(ptr_data_)
            inx_attr |= 0x10;
        if(opt_for_seq_)
            inx_attr |= 0x08;
        if(track_coherency_)
            inx_attr |= 0x02;

        ByteArray barr = new ByteArray(TMPL_LEN);
        barr.
            writeInt32(0).     // bytes provided, NO USE
            writeInt32(0).     // bytes available, NO USE
            // Symbolic object ID
            writeBytes(new byte[] {0x0E, 0x00}).
            writeEBCDIC37(name, 30, 0).
            writeInt32(CREATION_OPTION).
            writeInt32(RECOVERY_OPTION).
            writeInt32(0).     // Space size
            writeBytes(0, 1).  // Initial value of space
            writeInt32(0).     // Performance class
            writeBytes(0, 3).  // Reserved
            writeInt32(0).     // Extension offset
            writeBytes(0, 16). // SYP to context
            writeBytes(0, 16). // SYP to access group
            writeBytes(inx_attr, 1).  // Index attributes
            writeInt16(arg_len_).
            writeInt16(key_len_).
            // longer tempate
            writeBytes(0, 12). // Reserved
            writeBytes(0x00, 1). // Template version, must be 0x00
            writeBytes(INDEX_FORMAT, 1).
            writeBytes(0, 61);

        return barr.toBytes();
    }

    public void fromBytes(byte[] hostData) throws java.io.IOException {}
}
