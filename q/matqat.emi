/**
 * This file is part of i5/OS Programmer's Toolkit.
 * 
 * Copyright (C) 2010, 2011  Junlei Li (李君磊).
 * 
 * i5/OS Programmer's Toolkit is free software: you can redistribute
 * it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * i5/OS Programmer's Toolkit is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with i5/OS Programmer's Toolkit.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

/**
 * @file matqat.emi
 *
 * The queue object management API MATQAT can be used to materialize
 * attributes of a queue object. Note that, since the queue object
 * management APIs run in user state, they cannot be used to operate
 * on queue objects in system domain at security level 40 or above,
 * for example, a DTAQ or a USRQ created in system domain.
 *
 * @param [in] Qualified queue name in format of char(10) q-name + char(10) library name;
 *             special value *LIBL is acceptable.
 * @param [in] Char(1) subtype code of the queue object. hex 01 for a data queue, and hex 02 for a user queue.
 *
 * @remark 先停一下, 感觉类似这样的 API 意义不很大!
 */

dcl spcptr .qual-q-name parm     ;
dcl spcptr .subtype     parm     ;
dcl spcptr .q-attr      parm     ;
dcl spcptr .err-code    parm     ;

dcl ol pl-matqat (
	.qual-q-name,
        .subtype,
        .q-attr,
        .err-code
) parm ext min(3)               ;

entry i-matqat(pl-matqat) ext         ;

        stpllen num-parms       ;
        cmpnv(b) num-parms, 4
          / neq(=+3)            ; /* clear ec.byte-out */
        cpynv .err-code->qusec?bytes-out, 0 ;
        b where-are-you                     ;
:
        modexcpd oops, x'2000', x'01' ; /* disable EXCPD oops if err-code isn't passed */
where-are-you:  
        calli resolve-queue, *, resolve-queue-ptr ;

        /* materialize q attributes */
        matqat .q-attr, q-obj   ;
see-you:        
        rtx *                   ;

/* Exception handler */
dcl excm oops excid(h'0000') bp(on-error) imd cv('MCH') ;

on-error:       
        modasa @excp-data-ptr, 8 ;
        cpynv @excp-data?bytes-in, 8    ;
        retexcpd @excp-data-ptr, x'00'  ;
        cpynv len, @excp-data?bytes-out ;

        modasa @excp-data-ptr, -8 ;
        modasa @excp-data-ptr, len ;
        cpynv @excp-data?bytes-in, len ;
        retexcpd @excp-data-ptr, x'00' ;
brk "RETEXCPD"                  ;

        cmpnv(b) .err-code->qusec?bytes-in, 8
          / lo(end-fill-ec)     ;
dcl dd excpd-msg-len bin(4) auto ; /* length of exception specific data */
dcl spcptr msg-ptr auto          ;
        subn excpd-msg-len,
          @excp-data?bytes-out, 94 ;
        cpynv .err-code->qusec?bytes-out, excpd-msg-len ;

        cmpnv(b) .err-code->qusec?bytes-in, 15
          / lo(end-fill-ec)     ;
        cpybla .err-code->qusec?msg-id(1:3), @excp-data?cv ;
dcl dd cvtnc-bin2 bin(2) auto init(h'0000') ;
        dcl dd cvtnc-ch1 char(1) def(cvtnc-bin2) pos(2) ;
dcl dd cvtnc-attr char(7) auto init (
        x"02000200000000"
)                               ; /* treat receiver as ZND(2,0) */

        cpybla cvtnc-ch1, @excp-data?excid(1:1) ;
        cvtnc .err-code->qusec?msg-id(4:2), cvtnc-bin2,
          cvtnc-attr            ;
        cpybla cvtnc-ch1, @excp-data?excid(2:1) ;
        cvtnc .err-code->qusec?msg-id(6:2), cvtnc-bin2,
          cvtnc-attr            ;

        /* fill exception specific data */
        addn len, excpd-msg-len, 16 ;
        cmpnv(b) .err-code->qusec?bytes-in, len
          / lo(end-fill-ec)     ;
        setsppfp msg-ptr, @excp-data-ptr ;
        addspp msg-ptr, msg-ptr, 48      ;
dcl spcptr ec-ptr auto                   ;
        setsppfp ec-ptr, .err-code       ;
        addspp ec-ptr, ec-ptr, 16        ;
dcl ol memcpy-al (
        ec-ptr,
        msg-ptr,
        excpd-msg-len
) arg                           ;
        calli @memcpy, memcpy-al, @memcpy-ptr ;

end-fill-ec:    
brk "FILLEC"                    ;
        b see-you               ;

/* Resolve target queue object */
dcl insptr resolve-queue-ptr auto ;
entry resolve-queue int         ;

dcl dd qual-q-name char(20) bas(.qual-q-name) ;
        dcl dd q-name char(10) def(qual-q-name) pos(1) ;
        dcl dd lib-name char(10) def(qual-q-name) pos(11) ;
dcl dd subtype char(1) bas(.subtype) ;

dcl con *LIBL char(10) init (
        "*LIBL"
)                               ;
dcl dd r-tmpl char(34) auto     ;
dcl sysptr q-obj auto           ;

        cpybrep r-tmpl, x'00'       ;
        cpybla r-tmpl(1:1), x'0A'   ;
        cpybla r-tmpl(2:1), subtype ;
        cpyblap r-tmpl(3:30), q-name, " " ;

        cmpbla(b) lib-name, *LIBL
          / eq(resolve-in-libl) ;
dcl sysptr q-ctx auto           ;
dcl dd ctx-tmpl char(34) auto init(
        x"04014040404040404040404040404040404040404040404040404040404040400000"
)                               ;
        cpybla ctx-tmpl(3:30), lib-name ;
        rslvsp q-ctx, ctx-tmpl, *, *    ;
        rslvsp q-obj, r-tmpl, q-ctx, *  ;

        b end-resolve           ;
resolve-in-libl:
        rslvsp q-obj, r-tmpl, *, * ;
end-resolve:       
brk "QPTR"                      ;
        b resolve-queue-ptr     ;

/* Globals */
dcl dd num-parms bin(4) auto    ;
dcl dd db char(512) bas(*)      ;
dcl dd len bin(4) auto          ;

/**
 * API error code
 * @todo replace old `qusec' with this one.
 */
dcl spc qusec-t bas(*)          ;
        dcl dd qusec?bytes-in bin(4) dir ;
        dcl dd qusec?bytes-out bin(4) dir ;
        dcl dd qusec?msg-id char(7) dir   ;
        dcl dd *            char(1) dir   ;
        /* char(*) message specific data */

/include q.emi                  ;
/include memcpy.emi             ;
/include excp.emi               ;
pend                            ;
