/**
 * This file is part of i5/OS Programmer's Toolkit.
 * 
 * Copyright (C) 2010, 2011  Junlei Li (李君磊).
 * 
 * i5/OS Programmer's Toolkit is free software: you can redistribute
 * it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * i5/OS Programmer's Toolkit is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with i5/OS Programmer's Toolkit.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

/**
 * @file enq.emi
 *
 * The queue object management API ENQ can be using to enqueue
 * messages to queue objects, such as user queues or data queues (at
 * security level 30 or below).
 *
 * @param [in] Qualified queue name in format of char(10) q-name + char(10) library name;
 *             special value *LIBL is acceptable.
 * @param [in] Char(1) subtype code of the queue object. hex 01 for a data queue, and hex 02 for a user queue.
 * @param [in] Bin(4), length of key data to enqueue.
 * @param [in] Char(*), key data
 * @param [in] Bin(4), length of message data to enqueue.
 * @param [in] Char(*), message data
 * The following parameters are optional
 * @param [in/out] Optional API error code in format of Qus_EC_t
 *
 * @remark All parameter are expected to be passed by references.
 * @remark Caller is assumed to pass the correct length of key data and message data.
 * 
 * The following are examples of using the ENQ API:
 * @todo links of examples
 */

dcl spcptr .qual-q-name parm     ;
dcl spcptr .subtype     parm     ;
dcl spcptr .key-len     parm     ;
dcl spcptr .key         parm     ;
dcl spcptr .msg-len     parm     ;
dcl spcptr .msg         parm     ;
dcl spcptr .err-code    parm     ;

dcl ol pl-enq (
	.qual-q-name,
        .subtype,
        .key-len,
        .key,
        .msg-len,
        .msg,
        .err-code
) parm ext min(6)               ;

entry i-enq(pl-enq) ext         ;

        stpllen num-parms       ;
        cmpnv(b) num-parms, 7
          / neq(=+2)            ; /* clear ec.byte-out */
        cpynv .err-code->qusec?bytes-out, 0 ;
:       

        calli resolve-queue, *, resolve-queue-ptr ;
        calli enqueue, *, enqueue-ptr             ;
see-you:        
        rtx *                   ;

/* Resolve target queue object */
dcl insptr resolve-queue-ptr auto ;
entry resolve-queue int         ;

dcl dd qual-q-name char(20) bas(.qual-q-name) ;
        dcl dd q-name char(10) def(qual-q-name) pos(1) ;
        dcl dd lib-name char(10) def(qual-q-name) pos(11) ;
dcl dd subtype char(1) bas(.subtype) ;

dcl con *LIBL char(10) init (
        "*LIBL"
)                               ;
dcl dd r-tmpl char(34) auto     ;
dcl sysptr q-obj auto           ;

        cpybrep r-tmpl, x'00'       ;
        cpybla r-tmpl(1:1), x'0A'   ;
        cpybla r-tmpl(2:1), subtype ;
        cpyblap r-tmpl(3:30), q-name, " " ;

        cmpbla(b) lib-name, *LIBL
          / eq(resolve-in-libl) ;
dcl sysptr q-ctx auto           ;
dcl dd ctx-tmpl char(34) auto init(
        x"04014040404040404040404040404040404040404040404040404040404040400000"
)                               ;
        cpybla ctx-tmpl(3:30), lib-name ;
        rslvsp q-ctx, ctx-tmpl, *, *    ;
        rslvsp q-obj, r-tmpl, q-ctx, *  ;

        b end-resolve           ;
resolve-in-libl:
        rslvsp q-obj, r-tmpl, *, * ;
end-resolve:       
brk "QPTR"                      ;
        b resolve-queue-ptr     ;

/* Enqeue */
dcl insptr enqueue-ptr auto     ;
entry enqueue int               ;

dcl spcptr prefix auto          ;
dcl dd msg-prefix char(1) bas(*) ;
dcl spcptr key-ptr auto         ;
dcl dd len bin(4) auto          ;

dcl dd key-len bin(4) bas(.key-len) ;
dcl dd msg-len bin(4) bas(.msg-len) ;

        cpynv len, 4            ;
        cmpnv(b) key-len, 0
          / nlo(=+2)            ;
        cpynv key-len, 0        ;
:
        cmpnv(b) key-len, 256
          / nhi(=+2)            ;
        cpynv key-len, 256      ;
:       
        addn(s) len, key-len    ;
        modasa prefix, len      ;

        /* operand 2 of ENQ, prefix */
dcl ol al-key(key-ptr, .key, key-len) arg  ;
        cpynv prefix->enq?msg-len, msg-len ;
        cmpnv(b) key-len, 0
          / eq(=+4)             ;
        /* copy from .key to prefix->enq?key */
        setsppfp key-ptr, prefix           ;
        addspp key-ptr, key-ptr, 4         ;
        calli @memcpy, al-key, @memcpy-ptr ;
:       
        enq q-obj, prefix->msg-prefix, .msg ;

brk "ENQ"                       ;
        b enqueue-ptr           ;

dcl excm exc-mch excid(h'0000') int(on-error) imd cv('MCH') ;
entry on-error int              ;

dcl dd rtnexcp-tmpl char(19) auto bdry(16) ;
dcl spcptr rtn-target auto init(rtnexcp-tmpl) ;
dcl spc * bas(rtn-target)                     ;
        /* target invocation to returned to */
        dcl invptr rtn-invp dir               ;
        dcl dd * char(1) dir                  ;
        dcl dd action char(2) dir             ;

dcl ol curinvp-al (rtn-invp) arg ;
        calli @curinvp, curinvp-al, @curinvp-ptr ;

        /* check the number of parameters passed */
        cmpnv(b) num-parms, 6
          / hi(has-ec-parm)    ;
        /* disable EXCM exc-mch */
        modexcpd exc-mch, x'2000', x'01' ;
        /* re-signal exception to the caller */
        cpybla action, x'0000'  ;
        rtnexcp rtn-target      ;
has-ec-parm:

dcl spcptr excpd-ptr auto       ;
dcl dd excpd-len bin(4) auto    ;
dcl spc excpd-t bas(excpd-ptr)  ;
        dcl dd retexcpd?bytes-in bin(4) dir ;
        dcl dd retexcpd?bytes-out bin(4) dir ;
        dcl dd retexcpd?excp-id char(2) dir  ;
        dcl dd retexcpd?cv-len  bin(2) dir   ;
        dcl dd retexcpd?cv char(34) dir      ;
        dcl dd retexcpd?msg-ref-key char(2) dir ;
        /* exception specific data */
dcl dd excpd-msg-len bin(4) auto ;

        modasa excpd-ptr, 8     ;
        cpynv excpd-ptr->retexcpd?bytes-in, 8          ;
        retexcpd excpd-ptr, x'01'           ;
        cpynv excpd-len, excpd-ptr->retexcpd?bytes-out ;
        modasa excpd-ptr, -8                ;
        modasa excpd-ptr, excpd-len         ;
        cpynv excpd-ptr->retexcpd?bytes-in, excpd-len  ;
        retexcpd excpd-ptr, x'01'           ;

        /* fill the error-code parm and return */
        subn excpd-msg-len,
          retexcpd?bytes-out, 94 ;
        cmpnv(b) .err-code->qusec?bytes-in, 8
          / lo(end-copy-msg-data) ;
        addn .err-code->qusec?bytes-out,
          excpd-msg-len, 16     ;          /* ec.bytes-out */
:
dcl dd cvtnc-bin2 bin(2) auto init(h'0000') ;
        dcl dd cvtnc-ch1 char(1) def(cvtnc-bin2) pos(2) ;
dcl dd cvtnc-attr char(7) auto init (
        x"02000200000000"
)                               ; /* treat receiver as ZND(2,0) */
        cmpnv(b) .err-code->qusec?bytes-in, 15
          / lo(end-copy-msg-data) ;
        cpybla .err-code->qusec?msg-id(1:3),
          excpd-ptr->retexcpd?cv ;
        cpybla cvtnc-ch1, excpd-ptr->retexcpd?excp-id(1:1) ;
        cvtnc .err-code->qusec?msg-id(4:2),
          cvtnc-bin2, cvtnc-attr ;
        cpybla cvtnc-ch1, excpd-ptr->retexcpd?excp-id(2:1) ;
        cvtnc .err-code->qusec?msg-id(6:2),
          cvtnc-bin2, cvtnc-attr ;
:       
        cmpnv(b) .err-code->qusec?bytes-in, 16
          / nhi(end-copy-msg-data)            ;
dcl spcptr memcpy-target auto   ;
dcl spcptr memcpy-source auto   ;
dcl dd memcpy-len bin(4) auto   ;
dcl ol memcpy-al (memcpy-target, memcpy-source, memcpy-len) arg ;
        setsppfp memcpy-target, .err-code ;
        addspp memcpy-target, memcpy-target, 16 ;
        setsppfp memcpy-source, excpd-ptr ;
        addspp memcpy-source, memcpy-source, 48 ;
        subn memcpy-len, .err-code->qusec?bytes-in, 16 ;
        cmpnv(b) excpd-msg-len, memcpy-len
          / hi(=+2)             ;
        exchby excpd-msg-len, memcpy-len ;
:       
        calli @memcpy, memcpy-al, @memcpy-ptr   ;
end-copy-msg-data:
        neg(s) excpd-len        ;
        modasa excpd-ptr, excpd-len ;

        /*
         * resume execution with the instruction that follows the
         * RTNEXCP instruction and terminate the internal exception
         * handler sub invocation.
         */
        cpybla action, x'0200'  ;
        rtnexcp rtn-target      ;
        b see-you               ;

/* Globals */
dcl dd num-parms bin(4) auto    ;
dcl dd db char(512) bas(*)      ;

/**
 * API error code
 * @todo replace old `qusec' with this one.
 */
dcl spc qusec-t bas(*)          ;
        dcl dd qusec?bytes-in bin(4) dir ;
        dcl dd qusec?bytes-out bin(4) dir ;
        dcl dd qusec?msg-id char(7) dir   ;
        dcl dd *            char(1) dir   ;
        /* char(*) message specific data */

/include q.emi                  ;
/include memcpy.emi             ;
/include curinvp.emi            ;
pend                            ;
